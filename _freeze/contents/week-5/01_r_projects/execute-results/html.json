{
  "hash": "bf87cae6f047c0cc0ccdda64e47f3a63",
  "result": {
    "markdown": "---\ntitle: \"R projects\"\nengine: knitr\n---\n\n\n<br>\nUntil now, we only used R script (and eventually the R console) to run code. Doing an analysis however usually require multiple scripts, datasets and folders (to store the results, the reports, ...). We also run our code with a specific version of the packages. Using R scripts does not allow us to create reproducible analyses or share our code with others in our team, at least not in an easy way. We can use R projects that contain all of the data, code, output from our analyses, version of the packages used, ... \n\nWhen carrying out a data analysis project, we require many files: data (excel,csv, rds, ...), R scripts, results, etc. It is coding best practice to create a place to keep all of these together. We also need to know where they *live* in our computer when working within R, and need to tell R where to find the relevant files and where to store the corresponding output. Typically, we organise each data analysis into a project, i.e. a folder on your computer that holds all the files relevant to that piece of work. Organising our work in this way guarantees that the project can be moved around on your computer or onto other computers and everything will still work. It also creates reliable, behaviour across different computers or users and over time. \n\n## RStudio projects\n\nRStudio allows us to create projects. A project is effectively a folder/directory where we keep all the files relevant to a particular data analytics project. When we open the project, R and RStudio will work from within that folder/directory. This is called the **working directory**. Within our project, we can also create sub-folders, one of which might store images that we create, other modelling outputs, reports that we write, and of course the data files we need. \n\nWe can create a new R project using *File > New Project...*. This will open a pop-up window (see @fig-new-project). Click on *New Directory*, and choose a project type (for simple case, *New Project*). After given a name to the project, we finish the process by clicking on *Create Project*. We are moved to a new directory containing a `.Rproj` file. This consists in the settings of the project.\n\n::: {#fig-new-project}\n\n![](./images/new_project.png)\n\nNew project creation.\n\n:::\n\n## R environment\n\nBasics R projects are pretty limited. For example, an R project do not perform package versionning by default. Because of that, reproducibility might be difficult. To help with this issue, **reproducible enviromnent** has been introduced in R. To enable this feature, you will have to tick the checkbox when you create your project (see @fig-renv). Make sure to have the `renv` library installed!\n\n::: {#fig-renv}\n\n![](./images/renv.png)\n\nReproducible environment creation.\n\n:::\n\nYou can refer to the [Introduction to renv](https://rstudio.github.io/renv/articles/renv.html) vignette to get you started with `renv`.\n\n\n::: {.callout-note appearance=\"simple\"}\n\nI also encourage you to use git versionning for your projects. To learn more about git, you can refer to [git-scm](https://git-scm.com).\n\n:::\n\n## Additional resources\n\n* The `renv` [website](https://rstudio.github.io/renv/index.html).\n\n* The git [website](https://git-scm.com).\n\n* A git [cheat sheet](http://rogerdudler.github.io/git-guide/).\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 05](/weeks/week-5.qmd) ‚èé\n:::",
    "supporting": [
      "01_r_projects_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}