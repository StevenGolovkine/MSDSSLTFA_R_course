{
  "hash": "c58cac7d5dda960427d1db932868cc2d",
  "result": {
    "markdown": "---\ntitle: \"R Markdown and Quarto document\"\nengine: knitr\n---\n\n\nR Markdown is an authoring format for data science and analytics.  An R script file which only contains code and comments. An R Markdown file contains: \n    \n1. code chunks\n2. text/narrative \n3. meta data (tells it how to render the output)\n\nR Markdown can be used to create high-quality, fully reproducible, shareable and interactive reports.\n\n## What does R Markdown do?\n\nWhen you *knit* or *render* your R Markdown file, it will generate an output file in the format of your choice (e.g. HTML, Word, PDF). It will run the code embedded in the R Markdown file, dynamically updating any tables, plots or results that you want to create. You can then share your output file with colleagues.\n\n## R Markdown workflow\n\nThe following shows the basic workflow we'll follow when using R Markdown:\n\n1. Open a .Rmd File in RStudio using *File -> New File -> R Markdown*\n2. Embed your code in code chunks.\n3. Write text and add tables, figures, images, and citations as necessary.\n4. Set the output format and options in the YAML header.\n5. Save and render (knit) the document.\n6. Share your work!\n    \n## Getting started\n\nYou will first need to download and install the `rmarkdown` and `knitr` packages. You don't need to load these packages in the R Markdown file, they load automatically for you! If you want to render your files to PDF format, you will also need to download and install the `tinytex` package.\n\n### Open an R Markdown file\n\n[[add image]]\n\n### Open a new document\n\n[[add image]]\n\n### The R Markdown file\n\n### Changing the display location\n\n[[add image]]\n\n### Rendering (knitting)\n\n[[add image]]\n\n### The knitted file\n\n[[add image]]\n\n\n## What is YAML?\n\nEvery R Markdown document starts with a YAML header. YAML settings customises how the output file is rendered. You can set lots of options in the YAML heading, e.g. themes, default figure sizes, default output type (HTML, PDF, Word), include table of contents, etc.\n\n### Default YAML\n\nThe default YAML header in the template file is:\n\n```yaml\n---\ntitle: \"Untitled\"\noutput: html_document\n---\n```\n\nThe rendered document will be in HTML format. The rendered HTML file will have a title called \"Untitled\".\n\n**Exercise:** In the template file, change the title to \"My first document\". Knit the file and see what happens!\n\n\n### Adding an author and date\n\nAdding an author and today's date:\n```yaml\n---\ntitle: \"My first document\"\nauthor: \"Norma\"\ndate:  \"04 September, 2023\"\noutput: html_document\n---\n```\n\n**Exercise:** Add an author and date to the template file. Re-knit the file and see what happens!\n\n### Adding a table of contents\n\nTo add a table of contents we include a sub-heading in the output section:\n\n```yaml\n---\ntitle: \"My first document\"\nauthor: \"Norma\"\ndate:  \"04 September, 2023\"\noutput: \n  html_document:\n    toc: true\n---\n```\n\n**NOTE**: the `html_document` has moved to the next line with a `:` at the end. This has tabbed in by one. The toc must be tabbed in twice. \n\n**Exercise:** Add a table of contents to the template file. Re-knit and identify what has changed.\n\n### Adding a floating table of contents\n\nSpecifying the `toc_float` option to float the table of contents to the left of the document (open in the browser for best viewing). This looks like:\n\n```yaml\n---\ntitle: \"My first document\"\nauthor: \"Norma\"\ndate:  \"04 September, 2023\"\noutput: \n  html_document:\n    toc: true\n    toc_float: true\n---\n```\n\n### Section numbering\n\nNext let's number the document sections. The YAML will be:\n\n```yaml\n---\ntitle: \"My first document\"\nauthor: \"Norma\"\ndate:  \"04 September, 2023\"\noutput: \n  html_document:\n    toc: true\n    toc_float: true\n    number_sections: true\n---\n```\n\nWhen using the `number_sections` option, you should use HEADER 1 headers, i.e. use **# Header name** in the document. This is because HEADER 2 headers, i.e. **## Header name**, will be numbered with decimal points. \n\n**Exercise:** Try adding section numbers to the template file, and re-knit the file. Notice how the section numbers appear.  \n\nNext change the headers to HEADER 1 headers (delete one #) and re-knit. What is the difference in the output?\n\n### Themes\n\nThemes change how the rendered file will be styled. There are many themes including: default, bootstrap, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united, and yeti.\n\nLet's try some of these to see what they look like!\n\nLet's choose the flatly theme and use it in the template file:\n\n```yaml\n---\ntitle: \"My first document\"\nauthor: \"Norma\"\ndate:  \"04 September, 2023\"\noutput: \n  html_document:\n    toc: true\n    toc_float: true\n    number_sections: true\n    theme: flatly\n---\n```\n\nThe font, colour, link colour, etc. are all changed!\n\n**Exercise:** Try some of the other themes and pick your favourite.\n\n## Including text\n\nText or narrative is a fundamental part of any R Markdown document. There are several components that we can modify easily to change how the file is structured. These include bolding text, italicising text, (bulleted) lists, sectioning, etc.\n\n### Section headers\n\n```markdown\n# HEADER 1\n\n## HEADER 2\n\n### HEADER 3\n\n#### HEADER 4\n\n##### HEADER 5\n\n###### HEADER 6\n```\n\n### Bolding and italicising\n\n```markdown\n**Data analytics** is the process \nof exploring, \nvisualising and \nmodelling *Big Data*.\n```\n\n### Lists - bulleted\n\n```markdown\nData analytics includes:\n\n- data cleaning, \n- data visualisation, \n- data summary, \n- data modelling.\n\n```\n\n### Lists - numbered\n\n```markdown\nData analytics includes:\n\n1. data cleaning, \n2. data visualisation, \n3. data summary, \n4. data modelling.\n\n```\n\n### Sub-lists\n\n```markdown\nData analytics includes:\n\n1. data cleaning, \n2. data visualisation,\n  - categorical\n  - quantitative\n3. data summary, \n4. data modelling.\n\n```\n\n### Including images\n\n```markdown\nData analytics icon\n![](Data_analytics_image.jpeg)\n```\n\n### Links\n\n```markdown\n\nLearn more about data \nanalytics [here](https://bit.ly/3IlY9zv).\n\n![](Data_analytics_image.jpeg)\n\n```\n\n### Other ideas\n\nWhite space (tabs) matter in R Markdown! You can create tables, include bibliographies and write mathematical expressions using LaTeX code.\n\n\n### Including code chunks\n\nAn R code chunk can be added in several ways:\n    \n1. Cmd + Option + i (MacOS) or Ctrl + Alt + i (Windows)  \n2. Clicking *Code -> Insert chunk* in RStudio IDE  \n3. Using the following:\n````\n```{r}\n```\n````\n\n````\n```{r}\ncredit_df_clean %>% \n  count(default)\n```\n````\n\nCode is in the output file\nResults are in the output file\n\n\n````\n```{r}\ncredit_df_clean %>% \n  ggplot(aes(x = education, fill = education)) +\n  geom_bar() + \n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n````\n\n### Code chunk options - eval\n\n````\n```{r, eval = FALSE}\ncredit_df_clean %>% \n  count(default)\n```\n````\n\n\nCode is in the output file\nNo results are in the output file\n\n\n````\n```{r, eval = FALSE}\ncredit_df_clean %>% \n  ggplot(aes(x = education, fill = education)) +\n  geom_bar() + \n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n````\n\n### Code chunk options - include\n\n\n````\n```{r, include = FALSE}\ncredit_df_clean %>% \n  count(default)\n```\n````\n\nNo code is in the output file\nNo results are in the output file\n\n````\n```{r, include = FALSE}\ncredit_df_clean %>% \n  ggplot(aes(x = education, fill = education)) +\n  geom_bar() + \n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n````\n\n### Code chunk options - echo\n\n````\n```{r, echo = FALSE}\ncredit_df_clean %>% \n  count(default)\n```\n````\n\nNo code is in the output file\nResults are in the output file\n\n````\n```{r, echo = FALSE}\ncredit_df_clean %>% \n  ggplot(aes(x = education, fill = education)) +\n  geom_bar() + \n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n````\n\n### Other useful chunk options\n\nThere are lots of other chunk options. `fig.height`, `fig.width`, `fig.align` change the size and alignment of the outputted graph(s). Setting the `message` and `warning` options to FALSE will ensure that and warnings or messages that are printed when running a code chunk will not appear in the output file.\n\n---\n\n### Combining chunk options\n\nPlace between curly braces\n````\n```{r, option=value}\n```\n````\n\nMultiple options separated by commas\n````\n```{r, option1=value, option2=value}\n```\n````\n\nThe *r* part is the code engine (others such as Python, C, Julia, etc possible).\n\n\n### Running code chunks\n\nCode chunks can be run:\n\n1. on their own (click the green arrow on the top RHS of the chunk)\n2. all together by knitting the file\n    \nNB! The Markdown environment and R Console are **separate** environments.\n\nWhen you knit the Markdown file, everything is run in the that environment. If running code chunks individually (e.g. to check the code works), you are pushing the code to the R console. This means that you must load the relevant packages into the R console to avoid getting errors.\n\nIf a code chunk uses information from a previous code chunk, the previous code chunk must be run first.\n\n\n### Chunk labels\n\nCode chunks can be given labels or names that can be referred to or called from other locations in the file, e.g.\n````\n```{r look, echo = FALSE}\nstr(credit_df_clean)\n```\n````\n\n- NOTE: No comma between *r* and the label *look*. \n\nChunk options are then listed (separated by commas).\n\nNo duplicate labels allowed!\n\n\n### The setup chunk\n\n````\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n````\n\n- A special chunk: *setup*\n\n- Typically the first chunk in the Markdown file.\n\n- All following chunks will use these options (i.e., sets global chunk options).\n\n- Typically set include=FALSE.\n\n- You should also use individual chunk options!\n\n\n\n## Additional resources\n\n- A short tutorial on using R Markdown is available [here](https://commonmark.org/help/tutorial/) for you to try.\n\n- The book [R Markdown: the Definitive Guide](https://bookdown.org/yihui/rmarkdown/) lists many more.\n\n- The [RStudio R Markdown cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf) gives a great overview of these ideas.\n\n- The [RMarkdown reference guide](https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf?_ga=2.229584860.1166261784.1645476210-1869785281.1598968492) lists lots more options!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}