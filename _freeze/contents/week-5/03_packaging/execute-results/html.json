{
  "hash": "bc57b3f6546b8cf325383a7df4ac8729",
  "result": {
    "markdown": "---\ntitle: \"Packaging\"\nengine: knitr\n---\n\n\n<br>\nPackages serve as the core component of reproducible R code. They encompass reusable R functions, along with comprehensive documentation outlining their usage, as well as sample data for practical demonstration. Within this section, we will navigate the various stages of package development by creating a toy package. This package, named `converter` will serves the purpose of converting numerical values between the imperial and metric systems (this package already exists, [link](https://cran.r-project.org/web/packages/convertr/index.html)).\n\nFor more information about package development, you can visit the R packages [website](https://r-pkgs.org/).\n\nYou will need the `devtools` package to develop a package. For the rest of the section, we assume that this package is loaded.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools)\n```\n:::\n\n\n## Creation\n\n### Creation of the package\n\nTo create a new R package, you have to call the function `create_package()` from the package `usethis` (this package is automatically loaded with `devtools`). You can select the directory path in which you want to create the package by specifying it as an argument within the function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_package('./converter')\n```\n:::\n\n\nWhen running the function, you should see something similar to @fig-new-package. By default, it will open a new R session with the new package loaded like a project (re-load the `devtools` package as you are in a new session).\n\n::: {#fig-new-package}\n\n![](./images/pacakge_creation.png)\n\nCreation of a new package.\n\n:::\n\nYou will find several files within the newly created `converter` directory. Let's review them:\n\n* `.gitignore`: This file specifies which files git should ignore during version control.\n\n* `.Rbuildignore`: It lists files that are necessary for package development but not needed when building the package from source.\n\n* `converter.Rproj`: This file configures the directory as an RStudio project.\n\n* `DESCRIPTION`: Contains metadata and information about the package.\n\n* `NAMESPACE`: Defines which functions the package exports.\n\n* `R/`: This directory contains the R scripts with the functions.\n\n::: {.callout-note appearance=\"simple\"}\n\nTo make the directory a git directory, you can use the `use_git()` function. It does not need to be an R package to make the function works.\n\n:::\n\n### Create a function (or two)\n\nWe will create two simple functions: one that converts meter to yard and one that converts yard to meter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeter_to_yard <- function(x) {\n    1.0936 * x\n}\n\nyard_to_meter <- function(x) {\n    0.9144 * x\n}\n```\n:::\n\n\nWith our functions ready, the next step is to save them in a `.R` file and place this file into the `R/` subdirectory. To simplify this process, we can utilise the `use_r()` function. This function will create and/or open an `.R` file with the specified name, making it a convenient way to manage our functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_r(\"conversion\")\n```\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\n\nMake sure to only have the definition of the functions within the script. Do not add dependency in this script. Packages have their own dependencies management system.\n\n:::\n\nNow, call the `load_all()` function to make the functions available to experimentation. This function will simulate the process of building, intalling and loading the `converter` package, but without actually installing it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload_all()\n```\n:::\n\n\nThe `load_all()` function allows us to have empirical evidence that the functions work. But we would like to be sure that every part of the package works: documentation, compilation, dependencies, ... To do so, we use the `check()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck()\n```\n:::\n\n\nCurrently, there is not much to verify, but as the package becomes more intricate, it is advisable to perform regular checks to ensure everything is functioning correctly.\n\n::: {.callout-note appearance=\"simple\"}\n\nIf you follow the steps, the first `check()` should raise a warning concerning a missing license. By default, without a license, the code is copyrighted. People can read the code, but they have no legal right to use it. To use the code, you must contact the author directly and ask permission. You can choose a license using `use_*_license()` functions or directly write it down in the `DESCRIPTION` file.\n\n:::\n\n## Documentation\n\nAn important part of package development is documentation. The documentation is used to provide users of your package with help and example on how to use your code. It requires the package to have a particular documentation file `man/conversion.Rd`, written is a R-specific markup language. The package `roxygen2` will help with that. This package is used to format comments in your R script into documentation. All you have to do is replace the comment character (`#`) by the `rxoygen2` comment character (`#'`), plus some keywords.\n\nAdd the following comments to the R script.\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Convert meter to yard\n#'\n#' @param x A number.\n#'\n#' @return A number\n#' @export\n#'\n#' @examples\n#' meter_to_yard(1)\nmeter_to_yard <- function(x) {\n    1.0936 * x\n}\n\n#' Convert yard to meter\n#'\n#' @param x A number.\n#'\n#' @return A number\n#' @export\n#'\n#' @examples\n#' yard_to_meter(1)\nyard_to_meter <- function(x) {\n    0.9144 * x\n}\n```\n:::\n\n\nThere are four keywords in the example:\n\n* `@param`: describe the parameter of the function.\n\n* `@return`: describe what is returned by the function.\n\n* `@export`: tell R to make the function available to the user of the package. If not, the function is internal to the package.\n\n* `@examples`: show examples on the usage of the function.\n\nThere are more keywords that you can find in the `roxygen2` [website](https://roxygen2.r-lib.org). \n\nThen, you will need to convert the `rxoygen2` comments into documentation file using the function `document()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndocument()\n```\n:::\n\n\nAfter running the `load_all()` function, you can render the documentation using `?meter_to_yard()`. It results in @fig-example-function.\n\n::: {#fig-example-function}\n\n![](./images/example_function.png)\n\nDocumentation of the `meter_to_yard()` function.\n\n:::\n\nYou may also see that the `NAMESPACE` file change. It now contains the functions that are available (export) to the users of the package.\n\nDo not forget to `check()` the package after this step.\n\n## Testing\n\nAn important part of the process is to test your code. You can of course testing it by running small example locally. But we can formalise this using unit testing, which means that we express a concrete expectation about the correct result of a function for a specific input. We will use the `testthat` package to write the unit testing but few other package are available.\n\nTo setup the use of unit testing with `testthat`, you run\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_testthat()\n```\n:::\n\n\nThis function will create a new folder `tests` that contains the directory `testthat` and the script `testthat.R`. It also add the line `Suggests: testthat` to the `DESCRIPTION` file.\n\nSo, let's write a test for the `meter_to_yard()` function. First, use the helper function `use_test()` function to create a test file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_test(\"meter_to_yard\")\n```\n:::\n\n\nThen, populate this file with following code:\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"meter_to_yard() works\", {\n  expect_equal(meter_to_yard(1), 1.0936)\n})\n```\n:::\n\nThis code will test if `meter_to_yard(1)` is equal to $1.0936$.\n\nYou can run all the tests using the `test()` function.\n\n::: {.cell}\n\n```{.r .cell-code}\ntest()\n```\n:::\n\n\n::: {#fig-example-tests}\n\n![](./images/tests.png)\n\nOutput of the `test` command.\n\n:::\n\n::: {.callout-note appearance=\"simple\"}\n\nWhenever you run the command `check()`, the command `test()` is also run.\n\n:::\n\n\n## Final steps\n\n### Create a README.md\n\nIt is a common practice to create a `README` file that explain what is the purpose of the package, how to install it, how to propose modification, ... The function `use_readme_rmd()` initialises a basic and executable `README.Rmd` file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_readme_rmd()\n```\n:::\n\n\nYou can then populate this file like any other R Markdown file.\n\n### Installation\n\nThe last step is to install the package on your local system. Before installing it,\nrun a `check()` command and then\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall()\n```\n:::\n\n\n::: {#fig-install}\n\n![](./images/install.png)\n\nInstallation of the package.\n\n:::\n\n::: {.callout-note appearance=\"simple\"}\n\nYou may also want to submit the package to the CRAN ([link](https://cran.r-project.org/submit.html)).\n\n:::\n\n\n## Additional resources\n\n* The R packages [website](https://r-pkgs.org).\n\n* The `roxygen2` [website](https://roxygen2.r-lib.org).\n\n* The `testthat` [website](https://testthat.r-lib.org).\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 05](/weeks/week-5.qmd) ‚èé\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}