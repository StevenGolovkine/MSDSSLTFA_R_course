{
  "hash": "fba5db47604365fae29896074a5f33ad",
  "result": {
    "markdown": "---\ntitle: \"Dealing with large files\"\nengine: knitr\n---\n\n\n<br>\nLarge files are files that are too big for an R matrix. R matrices are limited to $2^{31} - 1 \\sim 2.1$ billion elements and are likely to exceed the available RAM before reaching this limit anyway. Do not even try to open it with Excel! In this section, we will see what we can do when we have such a massive amount of data. \n\n## Using bash scripting\n\nBash scripting tools are very useful when working on data analysis. Everyone that wants to work within this field should get familiar with these tools. You can access to a **terminal** to run bash command within RStudio from the Terminal pane (next to the Console pane).  \n\n::: {.callout-note appearance=\"simple\"}\nRemember, in RStudio, the **Console** pane allows you to run R command while the **Terminal** pane allows you to run bash command.\n:::\n\nWe will see some of the most used bash commands to manipulate data. For more information on bash scripting, you can refer to this [tutorial](https://linuxconfig.org/bash-scripting-tutorial-for-beginners). The most usuful command is the `man` command. This command is used to open the manual page of the given command. For example, `man cut` will open the manual page of the `cut` command.\n\n### Print the file\n\nThe commands `cat`, `head` and `tail` can be used to print part of the files. By default, the `cat` command will print all the lines of the file, the `head` command will print the $10$ first lines and the `tail` command will print the $10$ last lines. We can choose the number of lines displayed using the `-n` option.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nFor this example and the following, we assume that the `airports.csv` file is in the `source` in our current directory. This file contains information on all the airports in the US. You can find the data [herer](./source/airports.csv).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead source/airports.csv\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n\"iata\",\"airport\",\"city\",\"state\",\"country\",\"lat\",\"long\"\n\"00M\",\"Thigpen \",\"Bay Springs\",\"MS\",\"USA\",31.95376472,-89.23450472\n\"00R\",\"Livingston Municipal\",\"Livingston\",\"TX\",\"USA\",30.68586111,-95.01792778\n\"00V\",\"Meadow Lake\",\"Colorado Springs\",\"CO\",\"USA\",38.94574889,-104.5698933\n\"01G\",\"Perry-Warsaw\",\"Perry\",\"NY\",\"USA\",42.74134667,-78.05208056\n\"01J\",\"Hilliard Airpark\",\"Hilliard\",\"FL\",\"USA\",30.6880125,-81.90594389\n\"01M\",\"Tishomingo County\",\"Belmont\",\"MS\",\"USA\",34.49166667,-88.20111111\n\"02A\",\"Gragg-Wade \",\"Clanton\",\"AL\",\"USA\",32.85048667,-86.61145333\n\"02C\",\"Capitol\",\"Brookfield\",\"WI\",\"USA\",43.08751,-88.17786917\n\"02G\",\"Columbiana County\",\"East Liverpool\",\"OH\",\"USA\",40.67331278,-80.64140639\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail -n 2 source/airports.csv\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n\"ZUN\",\"Black Rock\",\"Zuni\",\"NM\",\"USA\",35.08322694,-108.7917769\n\"ZZV\",\"Zanesville Municipal\",\"Zanesville\",\"OH\",\"USA\",39.94445833,-81.89210528\n```\n:::\n:::\n\n\n:::\n\n### Sorting and filtering\n\nTo sort a csv file using a particular columns, we simply use the `sort` command. This command has two main options:\n\n* The `-t` to define the column seperator. For csv file, it will usually be `,`.\n\n* The `-k` to define the column to sort on. \n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nTo sort the dataset using the `City` columns (third columns), we will use:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsort -t, -k3 source/airports.csv | head -n 5\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n\"0J0\",\"Abbeville Municipal\",\"Abbeville\",\"AL\",\"USA\",31.60016778,-85.23882222\n\"0R3\",\"Abbeville Chris Crusta Memorial\",\"Abbeville\",\"LA\",\"USA\",29.97576083,-92.08415167\n\"U36\",\"Aberdeen Municipal\",\"Aberdeen\",\"ID\",\"USA\",42.92102222,-112.8811053\n\"ABR\",\"Aberdeen Regional\",\"Aberdeen\",\"SD\",\"USA\",45.44905556,-98.42183333\n\"M40\",\"Monroe County\",\"Aberdeen-Amory\",\"MS\",\"USA\",33.87374861,-88.48967833\n```\n:::\n:::\n\n\n:::\n\nWe can also filter by row using the command `awk` and by columns using the command `cut`. Similarly to the `sort` function, we need to define the delimiter of the file (`-F` for the `awk` command and `-d` for the `cut` command).\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nTo filter the rows where the airports is in California (fourth column), we will use:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nawk -F, '$4 = \"CA\"' source/airports.csv | head -n 5\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n\"iata\" \"airport\" \"city\" CA \"country\" \"lat\" \"long\"\n\"00M\" \"Thigpen \" \"Bay Springs\" CA \"USA\" 31.95376472 -89.23450472\n\"00R\" \"Livingston Municipal\" \"Livingston\" CA \"USA\" 30.68586111 -95.01792778\n\"00V\" \"Meadow Lake\" \"Colorado Springs\" CA \"USA\" 38.94574889 -104.5698933\n\"01G\" \"Perry-Warsaw\" \"Perry\" CA \"USA\" 42.74134667 -78.05208056\n```\n:::\n:::\n\n\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nTo get only the latitude (sixth column) and longitude (seventh column) in the data, we will use:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncut -f6,7 -d, source/airports.csv | head -n 5\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n\"lat\",\"long\"\n31.95376472,-89.23450472\n30.68586111,-95.01792778\n38.94574889,-104.5698933\n42.74134667,-78.05208056\n```\n:::\n:::\n\n\n:::\n\n### Some statistics\n\nThe `cut` command combines with other commands, such as `sort`, `uniq`, `wc` or `grep`, can be used to derive some statistics on the dataset.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nTo count the number of airports in each state, we can use:\n\n::: {.cell}\n\n```{.bash .cell-code}\ncut -f4 -d, source/airports.csv | sort | uniq -c | head -n 5\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n   1  NY\"\n 263 \"AK\"\n  73 \"AL\"\n  74 \"AR\"\n   3 \"AS\"\n```\n:::\n:::\n\n\nThe `cut` command is used to select the columns with the states, then we `sort` this column alphabetically and finally, we return the count `-c` of each state.\n\n:::\n\nYou remarked the `|` sign. This is the pipe operator in bash (remember in R, this is `|>` or `%>%`). It gives the output of the left hand side as the input of the right hand side.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nTo remove the lines with `NA` values in the fourth columns:\n\n::: {.cell}\n\n```{.bash .cell-code}\ncut -f4 -d, source/airports.csv | grep -v NA | head -n 5\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n\"state\"\n\"MS\"\n\"TX\"\n\"CO\"\n\"NY\"\n```\n:::\n:::\n\n\n:::\n\n## The `bigmemory` package\n\n\n\n\n## Additional resources\n\n* Learn Bash in Y minutes [website](https://learnxinyminutes.com/docs/bash/).\n\n* Bash scripting [tutorial](https://linuxconfig.org/bash-scripting-tutorial-for-beginners).\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 07](/weeks/week-7.qmd) ‚èé\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}