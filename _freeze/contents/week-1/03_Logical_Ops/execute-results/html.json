{
  "hash": "d2bc5eb1b90d9fe042a3825f1ab8c2ee",
  "result": {
    "markdown": "---\ntitle: \"Logical operators\"\nengine: knitr\n---\n\n\n## Logical operators\n\nLogical operators are used to compare objects. Every logical operator returns a\nlogical (boolean) vector of `TRUE`/`FALSE` values. We can then use these `TRUE`\nand `FALSE` values to create subsets of our data. The primary logical operators\nthat we can use in R are\n\n| Operator | Meaning                        |\n|:--------:|:-------------------------------|\n|   `==`   | equality                       |\n|   `!=`   | non-equality                   |\n|   `<`    | less than                      |\n|   `>`    | greater than                   |\n|   `<=`   | less than or equal to          |\n|   `>=`   | greater than or equal to       |\n|   `!`    | returns opposite boolean value |\n\n\n::: {.callout-note appearance=\"simple\"}\n\n## Examples\n\nFor these examples, let's set up a numeric vector `x`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 3.5, 7.9, 10, 12.3, NA, 15.8)\n```\n:::\n\n\nNow, let's use some logical operators:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx == 3.5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] FALSE  TRUE FALSE FALSE FALSE    NA FALSE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx != 3.5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1]  TRUE FALSE  TRUE  TRUE  TRUE    NA  TRUE\n```\n:::\n:::\n\n\nNotice that the `!` operator changes `TRUE` to `FALSE` and vice-versa.\n\nIf we want to identify where we have values $> 3.5$, we use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx > 3.5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] FALSE FALSE  TRUE  TRUE  TRUE    NA  TRUE\n```\n:::\n:::\n\n\nIf we use the `!` operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!(x > 3.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1]  TRUE  TRUE FALSE FALSE FALSE    NA FALSE\n```\n:::\n:::\n\n\nThis is equivalent to getting the values $\\leq 3.5$:\n\n::: {.cell}\n\n```{.r .cell-code}\nx <= 3.5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1]  TRUE  TRUE FALSE FALSE FALSE    NA FALSE\n```\n:::\n:::\n\n\n:::\n\n## The OR and AND operators\n\nTwo other very useful operators are the `|` (the OR operator) and the `&` (the\nAND operator). These are used to combine two or more logical operations. The `|`\n(OR) operator returns `TRUE` if any of the conditions are met. The `&` (AND)\noperator returns `TRUE` if both of the conditions are met. There are other\nfunctions such as `any()`, `all()` and `%in%` that you can use to apply OR and\nAND operators on logical vectors.\n\nThe table for the OR operator is\n\n|   `x`   |   `y`   | <code>x \\| y</code> |\n|:-------:|:-------:|:-------------------:|\n| `TRUE`  | `TRUE`  |       `TRUE`        |\n| `FALSE` | `TRUE`  |       `TRUE`        |\n| `TRUE`  | `FALSE` |       `TRUE`        |\n| `FALSE` | `FALSE` |       `FALSE`       |\n\n::: {.callout-note appearance=\"simple\"}\n\n## Examples\n\nSay we want to return `TRUE` if the value of `x` is $> 7.9$ OR $< 3.5$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx > 7.9 | x < 3.5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1]  TRUE FALSE FALSE  TRUE  TRUE    NA  TRUE\n```\n:::\n:::\n\n\n:::\n\n\nThe table for the AND operator is\n\n|   `x`   |   `y`   | <code>x & y</code> |\n|:-------:|:-------:|:------------------:|\n| `TRUE`  | `TRUE`  |       `TRUE`       |\n| `FALSE` | `TRUE`  |      `FALSE`       |\n| `TRUE`  | `FALSE` |      `FALSE`       |\n| `FALSE` | `FALSE` |      `FALSE`       |\n\n::: {.callout-note appearance=\"simple\"}\n\n## Examples\n\nSay we want to return `TRUE` if the value of `x` is $< 7.9$ AND $> 3.5$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx < 7.9 & x > 3.5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] FALSE FALSE FALSE FALSE FALSE    NA FALSE\n```\n:::\n:::\n\n\n:::\n\nThe `|` and `&` operators perform elementwise comparisons. So, they return a vector. To evaluate the statement from left to right, we use the `||` and `&&` operators. These operators can not be applied on vectors with more than one element. This is the appropriate form of the OR and AND operators in conditional statements.\n\n## Additional resources\n\n- The Logic documentation page ([?base::Logic](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Logic.html))\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 01](/weeks/week-1.qmd) ‚èé\n:::",
    "supporting": [
      "03_Logical_Ops_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}