{
  "hash": "b5ca1b3c4bef6e1ffce3c6130ec5621a",
  "result": {
    "markdown": "---\ntitle: \"Lists\"\nengine: knitr\n---\n\n\n<br>\nA list is an object consisting of an ordered collection of objects (its components). Each component of a list can have a different type (or mode).\n\n## Creating a list\n\nA list is created using the `list()` function. We pass R objects as arguments to this function, separated by a `,`. If no arguments are passed, then the list is empty. Elements of a list can have names, which often makes them easier to access.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlst <- list(1, FALSE, \"hello\")  # List without name \nlst <- list(a = c(1, 2, 3), b = \"hello\", c = c(TRUE, FALSE))  # List with name\n```\n:::\n\n\nLists can contain objects of different classes (vector, list, ...):\n\n::: {.cell}\n\n```{.r .cell-code}\nlst <- list(\n    vec = c(1, 2, 4),  # Vector\n    lst = list(v = \"Hello\"),  # List\n    mat = matrix(c(1, 0, 0, 1), nrow = 2)  # Matrix\n)\n```\n:::\n\n:::\n\nAs for vectors, lists have two intrinsic properties: its `mode` and its `length`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmode(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nlength(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 3\n```\n:::\n:::\n\n\nIn the case of named list, another property is added: its `names`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"vec\" \"lst\" \"mat\"\n```\n:::\n:::\n\n\n## Indexing lists\n\nTo subset/index lists, we can use:\n\n- `[ ]` which returns a list element (this will be a list).\n\n- `[[ ]]` or `$` which returns the contents of a list element (this will be an object of the same class as the element, e.g. vector, matrix, list, ...).\n\nThe rules for indexing lists based on position are the same as those for vectors. Lists can also be indexed using component names, which is not applicable to vectors. Typically, we employ `[ ]` when extracting multiple elements from a list and use `[[ ]]` (with a position) or `$` (with a name) when we require a single element from the list.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nTo access the first two elements of `lst` using `[ ]`, we can use a numbers indexing the positions of the elements in the list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlst[c(1, 2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n$vec\n[1] 1 2 4\n\n$lst\n$lst$v\n[1] \"Hello\"\n```\n:::\n:::\n\n\nThe same result can be achieved using the name of the elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlst[c('vec', 'lst')]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n$vec\n[1] 1 2 4\n\n$lst\n$lst$v\n[1] \"Hello\"\n```\n:::\n:::\n\n\nTo access the first element of `lst` using `[[ ]]`, we can use number indexing the position of the element in the list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlst[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 1 2 4\n```\n:::\n:::\n\n\nTo access the first element of `lst` using `$`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlst$vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 1 2 4\n```\n:::\n:::\n\n:::\n\n## Appending to lists\n\nAppending new elements to a list can be directly done by assigning a new value to a specific index. As previsouly, to access the index, you can use `[[ ]]` or `$` (even if the entry does not exist). We usually use position indexing, with `[[ ]]`, to append to the list sequentially (e.g. in a loop), while we use name indexing to save results. \n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nUsing position indexing:\n\n::: {.cell}\n\n```{.r .cell-code}\nlst[[4]] <- c(TRUE, FALSE, NA)\n```\n:::\n\n\nUsing name indexing:\n\n::: {.cell}\n\n```{.r .cell-code}\nlst$new <- \"This is new!\"\n```\n:::\n\n\n:::\n\n## Additional resources\n\n- R manual by the R Core Team, [Section 6 on lists](https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Lists-and-data-frames).\n\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 01](/weeks/week-1.qmd) ‚èé\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}