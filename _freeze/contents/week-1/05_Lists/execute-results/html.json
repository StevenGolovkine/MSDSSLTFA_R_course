{
  "hash": "a1c0f302268ae7f7bc28fd85b594cdc3",
  "result": {
    "markdown": "---\ntitle: \"Lists\"\nengine: knitr\n---\n\n\n## Creating a list\n\nA list is created using the `list()` function. We pass R objects as arguments to this function, separated by a `,`. If no arguments are passed, then the list is empty. Elements of a list can have names, which often makes them easier to access.\n\nExamples of lists:\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- list(1, FALSE, \"hello\")  # List without name \nl <- list(a = c(1, 2, 3), b = \"hello\", c = c(TRUE, FALSE))  # List with name\n```\n:::\n\n\nLists can contain objects of different classes (vector, list, ...):\n\n::: {.cell}\n\n```{.r .cell-code}\nl_mix <- list(\n    vec = c(1, 2, 4),  # Vector\n    l = list(v = \"Hello\"),  # List\n    mat = matrix(c(1, 0, 0, 1), nrow = 2)  # Matrix\n)\n```\n:::\n\n\n\n## List attributes\n\nLists are like vectors and have one dimension, their length. To determine how many elements are in a list, use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(l_mix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 3\n```\n:::\n:::\n\n\nEach element of the list will have its own attributes (e.g. dimension of a matrix):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(l_mix$mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 2 2\n```\n:::\n:::\n\n\nList elements also have names (if you choose to use them):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(l_mix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"vec\" \"l\"   \"mat\"\n```\n:::\n:::\n\n\nEach element of the list may also have row and/or column names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(l_mix$l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"v\"\n```\n:::\n:::\n\n\n\n## Subsetting lists\n\nTo subset/index lists we can use:\n\n- `[ ]` which returns a list element (this will be a list).\n\n- `[[ ]]` or `$` which returns the contents of a list element (this will be an object of the same class as the element, e.g. vector, matrix, list)\n\n- To access the first element of `l_mix` using `[ ]`, we can use a number(s) indexing the position(s) of the element(s) in the list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl_mix[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n$vec\n[1] 1 2 4\n```\n:::\n\n```{.r .cell-code}\nclass(l_mix[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"list\"\n```\n:::\n:::\n\n\n- Or the name(s) of the element(s):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl_mix[c('vec', 'l')]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n$vec\n[1] 1 2 4\n\n$l\n$l$v\n[1] \"Hello\"\n```\n:::\n\n```{.r .cell-code}\nclass(l_mix[c('vec', 'l')])\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"list\"\n```\n:::\n:::\n\n\n- To access the first element of `l_mix` using `[[ ]]`, we can use a number(s) indexing the position(s) of the element(s) in the list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl_mix[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 1 2 4\n```\n:::\n\n```{.r .cell-code}\nclass(l_mix[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"numeric\"\n```\n:::\n:::\n\n\n- Or the name(s) of the element(s):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl_mix[['vec']]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 1 2 4\n```\n:::\n\n```{.r .cell-code}\nclass(l_mix[['vec']])\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"numeric\"\n```\n:::\n:::\n\n\n- Using `[[ ]]` is equivalent to using the `$` symbol:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl_mix$vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 1 2 4\n```\n:::\n\n```{.r .cell-code}\nclass(l_mix$vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"numeric\"\n```\n:::\n:::\n\n\n## Appending lists\n\nWe can append lists using position:\n\n::: {.cell}\n\n```{.r .cell-code}\nl_mix[[4]] <- c(TRUE, FALSE, NA)\n```\n:::\n\n\nWe can also append lists using name:\n\n::: {.cell}\n\n```{.r .cell-code}\nl_mix$new <- \"This is new!\"\n```\n:::\n\n\nThe list `l_mix` has now 5 entries.\n\n## Additional resources\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}