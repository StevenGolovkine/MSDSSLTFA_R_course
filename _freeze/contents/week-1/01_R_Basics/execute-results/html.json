{
  "hash": "74fc3db1d26b842d1f9b5d29cbe673f6",
  "result": {
    "markdown": "---\ntitle: \"R Basics\"\nengine: knitr\n---\n\n\n## How does R work?\n\nBy running coding **expressions** in the R console. A prompt, the `>` sign, is displayed when R is waiting for an expression.\n\n**Expressions** in R denote code lines accomplishing specific tasks. These lines can be divided by a semicolon (`;`) or a new line. They can also be grouped using curly braces (`{` and `}`). Frequently, these expressions are stored together within **functions**.\n\n::: {#fig-expression}\n\n![](./images/expression.png)\n\nAn expression.\n\n:::\n\n\nIf an expression is incomplete at the end of a line, a `+` is displayed on subsequent lines until it is syntactically complete.\n\n::: {#fig-incomplete-expression}\n\n![](./images/incomplete_expression.png)\n\nAn incomplete expression.\n\n:::\n\n### Comments\n\nIn R, comments are designed with `#`. Multi-lines comments do not exists, you have to put another `#` at the beginning of each line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is a comment.\n# And, here another one!\n```\n:::\n\n\n### Evaluation\n\nWhen a complete expression is entered into the R console, it is **evaluated**. The result of the evaluated expression is then **returned**. Depending on the expression, the result might be printed or not. For example, the following expression is evaluated but nothing is printed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1  # Nothing is printed...\n```\n:::\n\n\nTo print the result, we use the `print` function or simply type the name of the object.\n\n### R as a calculator\n\nR is basically a calculator! Most of the usual mathematical functions are already implemented (`+`, `-`, `*`, `sqrt`, `exp`, etc.). You can type `?S4groupGeneric` to see all the default implemented mathematical functions.\n\n### Order of operations\n\nAs for mathematics, the order in which you list operations is important. R uses the BODMAS rule to decide on the ordering of the calculations:\n\n1.  **B**rackets\n2.  **O**rders (powers and roots)\n3.  **D**ivision\n4.  **M**ultiplication\n5.  **A**ddition\n6.  **S**ubtraction\n\nIt is often very useful to use brackets to make the ordering explicit.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 + 4 / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 12\n```\n:::\n:::\n\n\nwill perform the `4 / 2` part first and then add the result to `10`. While if we use brackets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(10 + 4) / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 7\n```\n:::\n:::\n\n\nthe `10 + 4` part is calculated first and the result is then divided by `2`.\n\n:::\n\n### Assignment operators\n\nIn R, the basic **assignment** operator is `<-`. For example, to store the value $1$ into the variable `x`, type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\n```\n:::\n\n\nYou could also use `=` as assignment operator, but this is generally reserved for use in function arguments. Rarely, you will come across the assignment operator `<<-`. This operator is used to define variables in *a different environment* than the one you are working in.\n\n## Getting help in R\n\nType the name of the function into the search bar in the Help pan and press Enter. The Help file can be opened from the R console using the command `?function` or `help(function)`.\n\nGoogle is your friend! And so is [stackoverflow](https://stackoverflow.com/collectives/r-language)...\n\nAn example of a documentation page is presented in @fig-help. The central elements are highlighted:\n\n- Description: Present a comprehensive outline of the function's purpose.\n\n- Usage: Outline the basic structure of the function.\n\n- Arguments: Detail the necessary input for the function.\n\n- Examples: Illustrate practical application of the function.\n\n::: {#fig-help}\n\n![](./images/documentation.png)\n\nDocumentation of the `sqrt` function.\n\n:::\n\n\n## R coding style\n\nMaintaining readable, clear, and maintainable code is essential in good programming practice. The first step towards achieving this is adhering to a consistent and organized coding style. For most cases, I highly recommend adopting the [tidyverse style guide](https://style.tidyverse.org/index.html). Following this style guide can greatly enhance code readability and facilitate collaboration in your R projects.\n\n\n## Additional resources\n\n- [R manual](https://cran.r-project.org/doc/manuals/R-lang.html) by the R Core Team.\n\n- [R reference](https://cran.r-project.org/doc/contrib/Short-refcard.pdf) card by Tom Short.\n\n- [Style guide](https://style.tidyverse.org/index.html) from the tidyverse.\n\n- Assignment operator [`<<-`](https://cran.r-project.org/doc/manuals/R-intro.html#Scope).\n\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 01](/weeks/week-1.qmd) ‚èé\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}