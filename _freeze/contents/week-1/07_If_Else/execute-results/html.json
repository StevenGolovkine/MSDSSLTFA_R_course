{
  "hash": "8dbe66c01b66b2efcb0c281860a05c9f",
  "result": {
    "markdown": "---\ntitle: \"If-Else statement\"\nengine: knitr\n---\n\n\n\nThe `if-else` combination is extremely common in R and in many other programming languages. These statements allow you to execute chunks of code if a particular condition is met (or not). We will look at `if`, `else` and `else if` statements.\n\n## if statements\n\nThe basic format of an `if` statement is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition) {\n    # Execute this code\n}\n    \n# Otherwise continue with rest of code\n```\n:::\n\n\nThe `condition` must be a logical operator, i.e. return only a TRUE or FALSE value. If the `condition` is TRUE, the code between the `{ }` will be executed.  If the `condition` is FALSE, the code between the `{ }` will be skipped and the next line(s) of code executed.\n\nFor example, a random number between $0$ and $100$ is generated and stored in `x`.  **Pass** will be printed if `x` is $>50$. The code is as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- sample(1:100, 1)\nif (x > 50) {\n    print(\"Pass\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"Pass\"\n```\n:::\n:::\n\n\n## else statements\n\nThe latter code will do nothing if the `condition` returns FALSE. If you want something specific to happen, an `else` statement is needed. This has the general form:\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition) {\n    # Execute this code\n} else {\n    # Execute this code instead\n}\n```\n:::\n\n    \n\nFor example, a random number between $0$ and $100$ is generated and stored in `x`. **Pass** will be printed if `x` is $>50$. **Fail** will be printed otherwise.\n\nThe code is as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- sample(1:100, 1)\n\nif (x > 50) {\n    print(\"Pass\")\n} else {\n    print(\"Fail\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"Fail\"\n```\n:::\n:::\n\n\n\n## if, else if, else statements\n\nYou can have a series of tests by starting with an `if` statement and following it with several `else if` statements. This has the general form:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition_1) {\n    # Execute code chunk 1\n} else if (condition_2) {\n    # Execute code chunk 2\n} else {\n    # Execute this code\n}\n```\n:::\n\n\n\nFOr example, a random number between $0$ and $100$ is generated and stored in `x`.  **Pass** will be printed if `x` is $>50$. **Check** will be printed if `x` is $>30$ and $\\leq 50$. **Fail** will be printed otherwise.\n\nThe code is as follows:\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- sample(1:100, 1)\nif (x > 50) {\n    print(\"Pass\")\n} else if (x > 30 & x <= 50) {\n    print(\"Check\")\n} else {\n    print(\"Fail\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"Fail\"\n```\n:::\n:::\n\n\n\n## Additional resource\n\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 01](/weeks/week-1.qmd) ‚èé\n:::",
    "supporting": [
      "07_If_Else_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}