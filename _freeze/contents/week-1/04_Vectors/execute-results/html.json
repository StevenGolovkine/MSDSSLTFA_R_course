{
  "hash": "5dfbbcbca9780350f47f6c54e2c9460b",
  "result": {
    "markdown": "---\ntitle: \"Vectors\"\nengine: knitr\n---\n\n\n## Creating a vector\n\nA vector is created using the `c()` function. To create a numeric vector with the values 1, 2, 3 and 4, we can use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1, 2, 3, 4)\nvec  # Print the contents\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 1 2 3 4\n```\n:::\n:::\n\n\n## Length and type of a vector\n\nThe `length()` function is used to count the number of elements within a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(10.4, 5.6, 3.1, 6.4, 21.7)  # Numeric vector with 5 elements\nlength(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 5\n```\n:::\n:::\n\n\nTo check the type of a vector, you can use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"double\"\n```\n:::\n:::\n\n\n## Combining vectors\n\nVectors can be combined using the `c()` command. For example, to combine twice the `vec` vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(vec, vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n [1] 10.4  5.6  3.1  6.4 21.7 10.4  5.6  3.1  6.4 21.7\n```\n:::\n:::\n\n\nBe careful, if you try to combine vectors with different type, the type of the resulting vector will be the most general one. For example, here, the numbers are converted to characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(vec, \"Mary\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"10.4\" \"5.6\"  \"3.1\"  \"6.4\"  \"21.7\" \"Mary\"\n```\n:::\n:::\n\n\n## Indexing vectors\n\nAccessing to specific element(s) of a vector is possible using the `[]` operator. For example, `vec[2]` will return the second element of the vector `vec`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 5.6\n```\n:::\n:::\n\n\nSpecifying negative values in the indices will drop that element(s).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[-2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 10.4  3.1  6.4 21.7\n```\n:::\n:::\n\n\nMultiple elements can be accessed by supplying a vector of indices. To access the first and third elements of `vec`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[c(1, 3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 10.4  3.1\n```\n:::\n:::\n\n\nTo access consecutive indices, you can use `:`. For example, to access the first, second and third elements of `vec`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 10.4  5.6  3.1\n```\n:::\n:::\n\n\nLogical operators can be used for subsetting vectors. If we want to work with just the components of `vec` that are larger than 6:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmask <- vec > 6\nvec[mask]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 10.4  6.4 21.7\n```\n:::\n:::\n\n\nNote that it could be done in one line using `vec[vec > 6]`. R returns the values in `vec` where a `TRUE` is recorded for `vec > 6`.\n\n## Operations\n\nUsual mathematical operators can be carried on vectors:\n\n-   Addition: `+`\n-   Subtraction: `-`\n-   Multiplication: `*`\n-   Division: `/`\n-   Euclidean division: `%%` and `%/%`\n-   Exponentiation: `^`\n\nComputations are (typically) performed **element-wise**. Recall the vector `vec`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(10.4, 5.6, 3.1, 6.4, 21.7)\n```\n:::\n\n\nIf we calculate `vec^2`, we get:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 108.16  31.36   9.61  40.96 470.89\n```\n:::\n:::\n\ni.e. R takes each elements of `vec` and calculates `value^2`.\n\nIf you are unsure if the calculations are element-wise, you should check on some elements. Other examples of common operations are `log()`, `exp()`, `sin()`, `cos()`, etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 2.341806 1.722767 1.131402 1.856298 3.077312\n```\n:::\n\n```{.r .cell-code}\nexp(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] 3.285963e+04 2.704264e+02 2.219795e+01 6.018450e+02 2.655769e+09\n```\n:::\n\n```{.r .cell-code}\nsin(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] -0.82782647 -0.63126664  0.04158066  0.11654920  0.28705265\n```\n:::\n:::\n\n\n## Vectors of the same length\n\nWe can add, subtract, multiply or divide vectors of the same length easily. In this case, R takes the values in the same locations (e.g. the first element of each vector) and performs the computations. For example, to add two vectors of the same length:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_1 <- c(1, 3, 5, 7, 9)\nvec_2 <- c(0, 2, 4, 6, 8)\n\nvec_1 + vec_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1]  1  5  9 13 17\n```\n:::\n:::\n\n\n\n## Vector of different lengths\n\nTo carry out an operation on two vectors of different lengths, the shorter vector is **recycled** to match the length of the longer one. Let's look at an example to understand the concept.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_1 <- c(1, 3, 5, 7, 9)\nvec_2 <- c(0, 2)\n\nvec_1 * vec_2\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in vec_1 * vec_2: longer object length is not a multiple of shorter\nobject length\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1]  0  6  0 14  0\n```\n:::\n:::\n\n\nLet's dive into the different elements of the resulting vector.\n\n-   The first element is `1 * 0 = 0`.\n-   The second element is `3 * 2 = 6`.\n-   The third element is `5 * 0 = 0`.\n-   The fourth element is `7 * 2 = 14`.\n-   The fifth element is `9 * 0 = 0`.\n\nThe version of `vec_2` that was actually multiplied to `vec_1` is therefore:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(0, 2, 0, 2, 0)\n```\n:::\n\n\n## Additional resources\n\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 01](/weeks/week-1.qmd) ‚èé\n:::",
    "supporting": [
      "04_Vectors_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}