{
  "hash": "3a6324e82401c5d82297532d943a7a40",
  "result": {
    "markdown": "---\ntitle: \"Types and Classes in R\"\nengine: knitr\n---\n\n\n## R types\n\nTypes refer to the basic built-in data types that R understands natively. The most common types are:\n\n- `logical` (a vector of logical (`TRUE/FALSE`) values)\n- `double` (a vector of real numbers, i.e. have decimal places)\n- `character` (a vector of character values)\n- `closure` (for functions)\n- `list` (for list)\n\nYou can access to the type of an object using the `typeof` function.\n\n## Vectors definition\n\nVectors are a sequence of values of the same data types. There are six basic vector types: `logical`, `integer`, `double`, `complex`, `character` and `raw`.\n\nExamples of vectors:\n\n::: {.cell}\n\n```{.r .cell-code}\ndouble_vector <- c(1, 2, 3)\ninteger_vector <- c(1L, 2L, 3L)  # Note the difference with the previous vector.\ncharacter_vector <- c(\"apple\", \"banana\", \"peach\")\n```\n:::\n\n\nVector is the most basic data type. Single numbers or strings are vectors of length 1. Note that it is possible to define vectors with length zero.\n\n## Lists\n\nLists are generic data structures that allows you to store different types of data objects. The *elements* of a list can be any data structure (even other lists).\n\nExamples of lists:\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- list(1, FALSE, \"hello\")\n\nl <- list(\n    a = c(1, 2, 3),\n    b = \"hello\",\n    c = c(TRUE, FALSE)\n)\n```\n:::\n\n\n## R classes\n\n\n## Additional resources\n",
    "supporting": [
      "02_R_Types_Classes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}