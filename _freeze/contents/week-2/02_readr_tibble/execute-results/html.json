{
  "hash": "91773490c937d08ffd429c7257456d1c",
  "result": {
    "markdown": "---\ntitle: \"Data reading and storing with readr and tibble\"\nengine: knitr\n---\n\n\n\n\n<br>\nIn most data analytics projects, the first step is to load data into R from an external file.  The `readr` package is part of the `tidyverse` and was created to read in large, flat data files (e.g. csv, text) to R. The package is built on similar base R functions but has made them much more efficient. It also interacts consistently with other `tidyverse` packages. Data are stored as `tibble`.\n\n## readr functions\n\nThere are several `readr` functions to choose from. These are:\n    \n* **read_csv()** - reads comma delimited files.\n* **read_tsv()** - reads tab delimited files.\n* **read_delim()** - reads in files with any delimiter.\n* **read_table()** - reads in fixed width files where columns are separated by white space.\n\nThe function used will depend on the type of file that is being read into R, but it will concern tabular data.\n\n## How to use `read_csv()`?\n\nA typical call to `read_csv()` has the form:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv(\n    file = 'filepath/filename.csv',\n    col_names = TRUE\n)\n```\n:::\n\n\nThe `file` argument is used to specify the file location (filepath), and the name of the file being read in (filename.csv). The function returns a tibble which can be stored with a name of your choice.\n\nThe `col_names` argument of the `read_csv()` function can be `TRUE` or `FALSE` or a character vector of column names. If `TRUE` (the default) the first row of input in the csv file will be used as the column names. If `FALSE` column names will be generated automatically (`X1`, `X2`, etc.). If a character vector, these will be used as the column names. By default, `read_csv()` reads in a csv file line-by-line. It will also read in the first few rows of the data and try to figure out the data type/class of each column. Sometimes it can make mistakes when doing this and often it is a good idea to explicitly specify the column types. This is achieved using the `col_types` argument. The `col_types = c` means that column stores character values. The `col_types = i` means that column stores integer values. The `col_types = d` means that column stores double values.\n\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nIf a file has 13 columns, 11 of which are double and 2 of which are integer, we can specify:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv(\n    './ressource/wine_quality.csv',\n    col_types = 'idddddddddddi'\n)\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 6 × 13\n     id fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n  <int>         <dbl>            <dbl>       <dbl>          <dbl>     <dbl>\n1     0           8               0.5         0.39            2.2     0.073\n2     1           9.3             0.3         0.73            2.3     0.092\n3     2           7.1             0.51        0.03            2.1     0.059\n4     3           8.1             0.87        0.22            2.6     0.084\n5     4           8.5             0.36        0.3             2.3     0.079\n6     5           9.9             0.51        0.44            2.2     0.111\n# ℹ 7 more variables: free_sulfur_dioxide <dbl>, total_sulfur_dioxide <dbl>,\n#   density <dbl>, pH <dbl>, sulphates <dbl>, alcohol <dbl>, quality <int>\n```\n:::\n:::\n\n\n:::\n\n## Checking the data\n\nIt is good practice to check that the data have read in correctly to R. Use the `head()`, `tail()`, `summarise()`, `str()`, `dim()`, ... commands to quickly check for any anomalies.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\nspc_tbl_ [2,056 × 13] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ id                  : int [1:2056] 0 1 2 3 4 5 6 7 8 9 ...\n $ fixed_acidity       : num [1:2056] 8 9.3 7.1 8.1 8.5 9.9 7.2 7.5 11.6 7.8 ...\n $ volatile_acidity    : num [1:2056] 0.5 0.3 0.51 0.87 0.36 0.51 0.87 0.43 0.38 0.78 ...\n $ citric_acid         : num [1:2056] 0.39 0.73 0.03 0.22 0.3 0.44 0 0.32 0.55 0.09 ...\n $ residual_sugar      : num [1:2056] 2.2 2.3 2.1 2.6 2.3 2.2 2.3 1.8 2.2 2.2 ...\n $ chlorides           : num [1:2056] 0.073 0.092 0.059 0.084 0.079 0.111 0.08 0.066 0.084 0.049 ...\n $ free_sulfur_dioxide : num [1:2056] 30 30 3 11 10 30 6 18 17 13 ...\n $ total_sulfur_dioxide: num [1:2056] 39 67 12 65 45 134 18 40 40 29 ...\n $ density             : num [1:2056] 0.996 0.999 0.997 0.997 0.994 ...\n $ pH                  : num [1:2056] 3.33 3.32 3.52 3.2 3.2 3.11 3.34 3.3 3.17 3.51 ...\n $ sulphates           : num [1:2056] 0.77 0.67 0.73 0.53 1.36 0.54 0.6 0.43 0.73 0.49 ...\n $ alcohol             : num [1:2056] 12.1 12.8 11.3 9.8 9.5 9.6 11.3 9.7 9.8 9.5 ...\n $ quality             : int [1:2056] 6 6 7 5 6 5 6 6 6 5 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   id = col_integer(),\n  ..   fixed_acidity = col_double(),\n  ..   volatile_acidity = col_double(),\n  ..   citric_acid = col_double(),\n  ..   residual_sugar = col_double(),\n  ..   chlorides = col_double(),\n  ..   free_sulfur_dioxide = col_double(),\n  ..   total_sulfur_dioxide = col_double(),\n  ..   density = col_double(),\n  ..   pH = col_double(),\n  ..   sulphates = col_double(),\n  ..   alcohol = col_double(),\n  ..   quality = col_integer()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n       id         fixed_acidity    volatile_acidity  citric_acid    \n Min.   :   0.0   Min.   : 5.000   Min.   :0.1800   Min.   :0.0000  \n 1st Qu.: 513.8   1st Qu.: 7.200   1st Qu.:0.3900   1st Qu.:0.0900  \n Median :1027.5   Median : 7.950   Median :0.5200   Median :0.2500  \n Mean   :1027.5   Mean   : 8.365   Mean   :0.5276   Mean   :0.2651  \n 3rd Qu.:1541.2   3rd Qu.: 9.200   3rd Qu.:0.6400   3rd Qu.:0.4200  \n Max.   :2055.0   Max.   :15.900   Max.   :1.5800   Max.   :0.7600  \n residual_sugar     chlorides       free_sulfur_dioxide total_sulfur_dioxide\n Min.   : 1.200   Min.   :0.01200   Min.   : 1.00       Min.   :  7.00      \n 1st Qu.: 1.900   1st Qu.:0.07100   1st Qu.: 8.00       1st Qu.: 22.00      \n Median : 2.200   Median :0.07900   Median :16.00       Median : 44.00      \n Mean   : 2.399   Mean   :0.08186   Mean   :16.96       Mean   : 49.24      \n 3rd Qu.: 2.600   3rd Qu.:0.09000   3rd Qu.:24.00       3rd Qu.: 65.00      \n Max.   :14.000   Max.   :0.41400   Max.   :68.00       Max.   :289.00      \n    density             pH          sulphates         alcohol     \n Min.   :0.9901   Min.   :2.740   Min.   :0.3900   Min.   : 8.70  \n 1st Qu.:0.9956   1st Qu.:3.200   1st Qu.:0.5500   1st Qu.: 9.50  \n Median :0.9967   Median :3.310   Median :0.6100   Median :10.10  \n Mean   :0.9967   Mean   :3.311   Mean   :0.6413   Mean   :10.41  \n 3rd Qu.:0.9978   3rd Qu.:3.390   3rd Qu.:0.7200   3rd Qu.:11.00  \n Max.   :1.0037   Max.   :3.780   Max.   :1.9500   Max.   :14.00  \n    quality     \n Min.   :3.000  \n 1st Qu.:5.000  \n Median :6.000  \n Mean   :5.721  \n 3rd Qu.:6.000  \n Max.   :8.000  \n```\n:::\n:::\n\n\n:::\n\n::: {.callout-note appearance=\"simple\"}\n\nNote that to read in Excel files, another package (`readxl`) have to downloaded and used. Similarly, with JSON files and the `jsonlite` package.\n\n:::\n\n## Additional resources\n\n* The `tibble` [website](https://tibble.tidyverse.org)\n\n* The `readr` [website](https://readr.tidyverse.org)\n\n* `readr` [cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf)\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 02](/weeks/week-2.qmd) ⏎\n:::",
    "supporting": [
      "02_readr_tibble_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}