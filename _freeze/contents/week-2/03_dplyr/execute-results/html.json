{
  "hash": "9457be144bbc520bc5acabd1f47b3f55",
  "result": {
    "markdown": "---\ntitle: \"Data manipulation with dplyr\"\nengine: knitr\n---\n\n\n\n\nThe `dplyr` package is one of the `tidyverse` packages. It greatly simplifies how we work with data frames (tibbles) in R and speeds up any associated computations. `dplyr` uses a *grammar* for data manipulation and working with data frames. This grammar consists of a number of different *verbs*. These verbs allow us to communicate how we are manipulating a data frame so that other people can understand it easily.\n\n## The dplyr verbs\n\nAlmost all data analytics projects will require us to use 5 basic `dplyr` verbs. These are:\n\n- **filter()** - extracts a subset of the rows of a data frame using logical conditions  \n- **arrange()** - reorder the rows of a data frame  \n- **select()** - extract a subset of the columns of a data frame \n- **mutate()** - add new variables/columns or transform existing variables to a data frame\n- **summarise()/summarize()** - calculate summary statistics of different variables in a data frame\n    \n\nAnother (very) useful verb is `group_by()`. This performs each of the previous operations by different strata as given by categories or groups (e.g. by species in the palmer penguin data). The pipe operator, `%>%`, is used to connect several of these verbs together into a pipeline.\n\n## How dplyr functions work\n\nAll of the `dplyr` functions work in a similar way. The first argument is a data frame (or tibble). Subsequent arguments describe what to do with the data frame (or tibble) using the variable names. The result of running the function(s) is a new data frame (or tibble).\n\n**NOTE**: the data must be in *tidy* format, i.e. one observation per row, one variable per column, one value per cell.\n\n## What is filter()?\n\nThe `filter()` function extracts subsets of rows from a data frame. It selects the *rows* using logical operators/conditions.  The logical conditions relate to the *columns* of the data frame.\n\n### How to use filter()?\n\nThere are two ways to use the `filter()` command. The first is:\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(data, condition_1, condition_2, condition_3)\n```\n:::\n\n\nThe second uses the pipe:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n    filter(condition_1, condition_2, condition_3)\n```\n:::\n\n\nAll conditions must be `TRUE` for the row to be extracted.\n\n\n### Example palmer penguins data\n\nLet's use the penguins dataset from the `palmerpenguins` package to demonstrate. To access the data, make sure that you have downloaded the package into RStudio. Then load the package by running the `library(palmerpenguins)` command or ticking the checkbox beside the package name in the `Packages` tab in RStudio. The `tidyverse` packages must also be loaded!\n\n- Example - one condition\n\nTo start, we will use a single condition in the `filter()` command. To filter all penguins (rows) with bill length > 38mm use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(penguins, bill_length_mm > 38)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 280 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           39.3          20.6               190        3650\n 5 Adelie  Torgersen           38.9          17.8               181        3625\n 6 Adelie  Torgersen           39.2          19.6               195        4675\n 7 Adelie  Torgersen           42            20.2               190        4250\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           38.7          19                 195        3450\n# ℹ 270 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nWe can do exactly the same using the pipe, `%>%`:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    filter(bill_length_mm > 38)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 280 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           39.3          20.6               190        3650\n 5 Adelie  Torgersen           38.9          17.8               181        3625\n 6 Adelie  Torgersen           39.2          19.6               195        4675\n 7 Adelie  Torgersen           42            20.2               190        4250\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           38.7          19                 195        3450\n# ℹ 270 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n    \nBoth of these are (almost) equivalent to using the base R command:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins[penguins$bill_length_mm > 38, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 282 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 <NA>    <NA>                NA            NA                  NA          NA\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           42            20.2               190        4250\n 9 Adelie  Torgersen           41.1          17.6               182        3200\n10 Adelie  Torgersen           38.6          21.2               191        3800\n# ℹ 272 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nThere are 2 extra rows in the base R version. Why? When using `filter()`, if a condition evaluates to `NA` the row will be dropped, unlike base subsetting with `[ ]`.\n\n\n- Example - two conditions\n\nNext extract penguins from the Adelie species who have bill length > 38mm:\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(penguins, bill_length_mm > 38, species == \"Adelie\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 89 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           39.3          20.6               190        3650\n 5 Adelie  Torgersen           38.9          17.8               181        3625\n 6 Adelie  Torgersen           39.2          19.6               195        4675\n 7 Adelie  Torgersen           42            20.2               190        4250\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           38.7          19                 195        3450\n# ℹ 79 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nDo this using the pipe:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    filter(bill_length_mm > 38, species == \"Adelie\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 89 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           39.3          20.6               190        3650\n 5 Adelie  Torgersen           38.9          17.8               181        3625\n 6 Adelie  Torgersen           39.2          19.6               195        4675\n 7 Adelie  Torgersen           42            20.2               190        4250\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           38.7          19                 195        3450\n# ℹ 79 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nOr using base R:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins[penguins$bill_length_mm > 38 & penguins$species == \"Adelie\", ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 90 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 <NA>    <NA>                NA            NA                  NA          NA\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           42            20.2               190        4250\n 9 Adelie  Torgersen           41.1          17.6               182        3200\n10 Adelie  Torgersen           38.6          21.2               191        3800\n# ℹ 80 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nThis is much more difficult to read. \n\n## What is arrange()?\n\nThe `arrange()` function orders the rows of a data frame. It arranges the rows by the values of selected columns. The default is to arrange the values in ascending order (from smallest to largest).\n\n### How to use arrange()?\n\nThere are two ways to use the `arrange()` command. The first is:\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(data, column_1, column_2, column_3)\n```\n:::\n\n\nThe second uses the pipe:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n    arrange(column_1, column_2, column_3)\n```\n:::\n\nWe will use the second version.\n\nThe default arrangement from smallest to largest can be changed using the `desc()` function. `NA` values are automatically sorted to the end.\n\n- Example - ascending order\n\nTo arrange all penguins by their bill length:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    arrange(bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Dream               32.1          15.5               188        3050\n 2 Adelie  Dream               33.1          16.1               178        2900\n 3 Adelie  Torgersen           33.5          19                 190        3600\n 4 Adelie  Dream               34            17.1               185        3400\n 5 Adelie  Torgersen           34.1          18.1               193        3475\n 6 Adelie  Torgersen           34.4          18.4               184        3325\n 7 Adelie  Biscoe              34.5          18.1               187        2900\n 8 Adelie  Torgersen           34.6          21.1               198        4400\n 9 Adelie  Torgersen           34.6          17.2               189        3200\n10 Adelie  Biscoe              35            17.9               190        3450\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\nNotice the values in the `bill_length_mm` column. It is much more difficult to do this in base R!\n\n- Example - descending order\n\nTo arrange the rows in descending value of bill length:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    arrange(desc(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 344 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>     <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Gentoo    Biscoe           59.6          17                 230        6050\n 2 Chinstrap Dream            58            17.8               181        3700\n 3 Gentoo    Biscoe           55.9          17                 228        5600\n 4 Chinstrap Dream            55.8          19.8               207        4000\n 5 Gentoo    Biscoe           55.1          16                 230        5850\n 6 Gentoo    Biscoe           54.3          15.7               231        5650\n 7 Chinstrap Dream            54.2          20.8               201        4300\n 8 Chinstrap Dream            53.5          19.9               205        4500\n 9 Gentoo    Biscoe           53.4          15.8               219        5500\n10 Chinstrap Dream            52.8          20                 205        4550\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n### Multiple columns\n\nYou can also arrange multiple columns using `arrange()`. This works if there are multiple repeating values in column 1, and then column 2 is arranged. Therefore it doesn't work well for the `penguins` data.\n\n## What is select()?\n\nThe `select()` function is used to select columns of a data frame that you want to focus on. In any data analysis project, you will have a large data frame that contains all of the data. However, for a particular analysis (or part of an analysis) only a subset of these data are needed.\n\n### How to use select()?\n\nThere are two ways to use the `select()` command. The first is:\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(data, column_1, column_2, column_3)\n```\n:::\n\n\nThe second uses the pipe:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n    select(column_1, column_2, column_3)\n```\n:::\n\nWe will use the second version.\n\n- Example - one column\n\nTo select just the bill length from the `penguins` data:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    select(bill_length_mm)\n```\n:::\n\n\n- Example - except one column\n\nTo select everything *except* the bill length column:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    select(-bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 344 × 7\n   species island    bill_depth_mm flipper_length_mm body_mass_g sex     year\n   <fct>   <fct>             <dbl>             <int>       <int> <fct>  <int>\n 1 Adelie  Torgersen          18.7               181        3750 male    2007\n 2 Adelie  Torgersen          17.4               186        3800 female  2007\n 3 Adelie  Torgersen          18                 195        3250 female  2007\n 4 Adelie  Torgersen          NA                  NA          NA <NA>    2007\n 5 Adelie  Torgersen          19.3               193        3450 female  2007\n 6 Adelie  Torgersen          20.6               190        3650 male    2007\n 7 Adelie  Torgersen          17.8               181        3625 female  2007\n 8 Adelie  Torgersen          19.6               195        4675 male    2007\n 9 Adelie  Torgersen          18.1               193        3475 <NA>    2007\n10 Adelie  Torgersen          20.2               190        4250 <NA>    2007\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n- Example - multiple columns\n\nTo select the bill length and body mass columns:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    select(bill_length_mm, body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 344 × 2\n   bill_length_mm body_mass_g\n            <dbl>       <int>\n 1           39.1        3750\n 2           39.5        3800\n 3           40.3        3250\n 4           NA            NA\n 5           36.7        3450\n 6           39.3        3650\n 7           38.9        3625\n 8           39.2        4675\n 9           34.1        3475\n10           42          4250\n# ℹ 334 more rows\n```\n:::\n:::\n\n\nWe can use the minus sign to select everything except these columns:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    select(-bill_length_mm, -body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 344 × 6\n   species island    bill_depth_mm flipper_length_mm sex     year\n   <fct>   <fct>             <dbl>             <int> <fct>  <int>\n 1 Adelie  Torgersen          18.7               181 male    2007\n 2 Adelie  Torgersen          17.4               186 female  2007\n 3 Adelie  Torgersen          18                 195 female  2007\n 4 Adelie  Torgersen          NA                  NA <NA>    2007\n 5 Adelie  Torgersen          19.3               193 female  2007\n 6 Adelie  Torgersen          20.6               190 male    2007\n 7 Adelie  Torgersen          17.8               181 female  2007\n 8 Adelie  Torgersen          19.6               195 male    2007\n 9 Adelie  Torgersen          18.1               193 <NA>    2007\n10 Adelie  Torgersen          20.2               190 <NA>    2007\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n- Example - a range of columns\n\nYou can use the `:` to select all columns that are between two columns (inclusive). For the `penguins` data remember that:\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n```\n:::\n:::\n\nThere are 8 columns, with names as given above. To extract all the columns between `bill_length_mm` and `flipper_length_mm` (inclusive) use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    select(bill_length_mm:flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm flipper_length_mm\n            <dbl>         <dbl>             <int>\n 1           39.1          18.7               181\n 2           39.5          17.4               186\n 3           40.3          18                 195\n 4           NA            NA                  NA\n 5           36.7          19.3               193\n 6           39.3          20.6               190\n 7           38.9          17.8               181\n 8           39.2          19.6               195\n 9           34.1          18.1               193\n10           42            20.2               190\n# ℹ 334 more rows\n```\n:::\n:::\n\n    \nPutting the minus sign in front drops these columns:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    select(-(bill_length_mm:flipper_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 344 × 5\n   species island    body_mass_g sex     year\n   <fct>   <fct>           <int> <fct>  <int>\n 1 Adelie  Torgersen        3750 male    2007\n 2 Adelie  Torgersen        3800 female  2007\n 3 Adelie  Torgersen        3250 female  2007\n 4 Adelie  Torgersen          NA <NA>    2007\n 5 Adelie  Torgersen        3450 female  2007\n 6 Adelie  Torgersen        3650 male    2007\n 7 Adelie  Torgersen        3625 female  2007\n 8 Adelie  Torgersen        4675 male    2007\n 9 Adelie  Torgersen        3475 <NA>    2007\n10 Adelie  Torgersen        4250 <NA>    2007\n# ℹ 334 more rows\n```\n:::\n:::\n\n\n**NOTE**: Brackets around the column names!\n\n\n### Re-arranging columns\n\nYou can also re-arrange the order of the columns using `select()` and `everything()`. To put the `year` column first, followed by everything else:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    select(year, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 344 × 8\n    year species island    bill_length_mm bill_depth_mm flipper_length_mm\n   <int> <fct>   <fct>              <dbl>         <dbl>             <int>\n 1  2007 Adelie  Torgersen           39.1          18.7               181\n 2  2007 Adelie  Torgersen           39.5          17.4               186\n 3  2007 Adelie  Torgersen           40.3          18                 195\n 4  2007 Adelie  Torgersen           NA            NA                  NA\n 5  2007 Adelie  Torgersen           36.7          19.3               193\n 6  2007 Adelie  Torgersen           39.3          20.6               190\n 7  2007 Adelie  Torgersen           38.9          17.8               181\n 8  2007 Adelie  Torgersen           39.2          19.6               195\n 9  2007 Adelie  Torgersen           34.1          18.1               193\n10  2007 Adelie  Torgersen           42            20.2               190\n# ℹ 334 more rows\n# ℹ 2 more variables: body_mass_g <int>, sex <fct>\n```\n:::\n:::\n\n\n## What is mutate()?\n\nIt is often useful to create new variables that are derived from existing ones in a data frame. The `mutate()` function is used to compute transformations of existing variables (columns) in a data frame. For example, we might want to transform from hours to minutes, millimeters to centimeters, etc. `mutate()` provides a simple interface to achieve this.\n\n### How to use mutate()?\n\nTo use `mutate()` with the pipe:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n    mutate(\n        new_column_name_1 = func_of_column_name_X,\n        new_column_name_2 = func_of_column_name_Y,\n        new_column_name_3 = func_of_column_name_Z\n    )\n```\n:::\n\n\nThe transformed `X`, `Y`, `Z` columns will then be stored in new columns with the column names specified on the LHS of the `=`.\n\n- Example - one new variable (column)\n\nWe will first convert the bill length in the `penguins` data from mm to cm:\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.penguins <- penguins %>%\n    mutate(bill_length_cm = bill_length_mm / 100) \n```\n:::\n\nand store the results in a new data frame (tibble), `new.penguins`\n\nCheck the names of `new.penguins`:\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(new.penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"              \"bill_length_cm\"   \n```\n:::\n:::\n\n\nExtract just the `bill_length_mm` and `bill_length_cm` columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.penguins %>%\n    select(bill_length_mm, bill_length_cm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 344 × 2\n   bill_length_mm bill_length_cm\n            <dbl>          <dbl>\n 1           39.1          0.391\n 2           39.5          0.395\n 3           40.3          0.403\n 4           NA           NA    \n 5           36.7          0.367\n 6           39.3          0.393\n 7           38.9          0.389\n 8           39.2          0.392\n 9           34.1          0.341\n10           42            0.42 \n# ℹ 334 more rows\n```\n:::\n:::\n\n\n- Example - two new variables\n\nTo convert the bill length and flipper length from mm to cm and store the result in a new data frame `new.penguins`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.penguins <- penguins %>%\n    mutate(\n        bill_length_cm = bill_length_mm / 100,\n        flipper_length_cm = flipper_length_mm / 100\n    )\n```\n:::\n\n\nAgain check the names:\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(new.penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n [1] \"species\"           \"island\"            \"bill_length_mm\"   \n [4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n [7] \"sex\"               \"year\"              \"bill_length_cm\"   \n[10] \"flipper_length_cm\"\n```\n:::\n:::\n\n\n- Example - two new variables\n\nExtract the `bill_length_mm`, `bill_length_cm`, `flipper_length_mm` and `flipper_length_cm` columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.penguins %>%\n    select(bill_length_mm, bill_length_cm, flipper_length_mm, flipper_length_cm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 344 × 4\n   bill_length_mm bill_length_cm flipper_length_mm flipper_length_cm\n            <dbl>          <dbl>             <int>             <dbl>\n 1           39.1          0.391               181              1.81\n 2           39.5          0.395               186              1.86\n 3           40.3          0.403               195              1.95\n 4           NA           NA                    NA             NA   \n 5           36.7          0.367               193              1.93\n 6           39.3          0.393               190              1.9 \n 7           38.9          0.389               181              1.81\n 8           39.2          0.392               195              1.95\n 9           34.1          0.341               193              1.93\n10           42            0.42                190              1.9 \n# ℹ 334 more rows\n```\n:::\n:::\n\n\n## What is summarise()?\n\nThe `summarise()` function is used to compute statistical summaries of the variables (columns) or rows in a data frame. It will take a vector of data and reduce it to a single summary statistic, e.g. mean, median, min, max. The `summarise()` function can be used directly, or with the pipe.\n\n### How to use summarise()?\n\nTo use `summarise()` with the pipe:\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n    summarise(\n        summary_1 = summary_func_1(column_name),\n        summary_2 = summary_func_2(column_name),\n        summary_3 = summary_func_3(column_name)\n    )\n```\n:::\n\nThe `data` is the data frame or tibble that you want to summarise. The `summary_1/2/3/etc` values are the names of the summary statistics. The `summary_func_1/2/3/etc` values are the summary functions used, e.g. mean, median, min, max.  The `column_name` is the vector of data to summarise (typically a column(s) of the data frame).\n\n- Example - one summary\n\nTo calculate the mean bill length in the `penguins` data:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    summarise(\n        mean_bill_len = mean(bill_length_mm, na.rm = TRUE)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 1 × 1\n  mean_bill_len\n          <dbl>\n1          43.9\n```\n:::\n:::\n\nThis returns a tibble with 1 element, the mean bill length. We could store this into a new object if needed.\n\n- Example - two summaries\n\nCalculate the mean bill length and flipper length:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n    summarise(\n        mean_bill_len = mean(bill_length_mm, na.rm = TRUE),\n        mean_flipper_len = mean(flipper_length_mm, na.rm = TRUE)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 1 × 2\n  mean_bill_len mean_flipper_len\n          <dbl>            <dbl>\n1          43.9             201.\n```\n:::\n:::\n\n    \nThis gives a tibble with 1 row and 2 columns (one for the mean of each variable).\n\nYou could also use other summary functions, `median()`, `sd()`, `min()`, `max()`, `IQR()`, etc. \n\n### Calculating grouped summaries\n\nOften `summarise()` is used with the `group_by()` function. `group_by()` allows us to \"split\" our data into sections as defined by our *grouping* variable, e.g. species. We can then perform calculations on each section separately. When used with `summarise()`, summaries are calculated separately for each of the unique groups created by `group_by()`.\n\nTo calculate the mean bill length for each species:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n        group_by(species) %>%\n        summarise(mean_bill_len = mean(bill_length_mm, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 3 × 2\n  species   mean_bill_len\n  <fct>             <dbl>\n1 Adelie             38.8\n2 Chinstrap          48.8\n3 Gentoo             47.5\n```\n:::\n:::\n\nA tibble with 3 rows and 2 columns is returned. The first column contains the group names and the second the corresponding mean values. \n\n## Additional resources\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}