{
  "hash": "f247090fc6a64482f90a6fc22850e056",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidy data with tidyr\"\nengine: knitr\n---\n\n\n\n\n\n<br>\nTidy data is a standard way of storing and organising data so that it is easy to understand and use. Recall that it has three main principles:\n\n1. Each variable is stored in a separate column.\n\n2. Each observation is stored in a separate row.\n\n3. Each value of a variable is stored in a single cell.\n\nThe `tidyr` package is a collection of functions that help you to wrangle your data into a tidy format. It provides a consistent set of verbs for pivoting, gathering, spreading, and mutating data.\n\n## Reshaping data\n\nReshaping data in R is the process of transforming data from one format to another. This can be done for a variety of reasons, such as to make the data easier to analyse, to make it more compatible with a particular statistical software package, or to make it easier to visualise.\n\nThere are two main ways to reshape data in R:\n\n- **Pivoting** is the process of transforming data from a wide format to a long format. In wide format, each variable is stored in a separate column, and each observation is stored in a separate row. In long format, each observation is stored in a single row, and the variables are stored in a single column. We can use the `pivot_longer()` function to pivot the data frame. This function takes a data frame and gathers multiple columns into a single column, with the values of the multiple columns stored in a new column.\n- **Spreading** is the opposite of pivoting. It is the process of transforming data from a long format to a wide format. We can use the `pivot_wider()` function to spread the data frame. This function is the opposite of `pivot_longer()`. It takes a data frame and spreads a single column into multiple columns, with the values of the column split into the new columns.\n\nThe `tidyr` package offers two functions to reshape a data frame: `pivot_longer()` for pivoting and `pivot_wider()` for spreading.\n\n::: {.callout-note appearance=\"simple\"}\n\nNote that to you may find the functions `gather()` and `spread()` in some code. This functions are no longer in used and have been replaced by `pivot_longer()` and `pivot_wider()`.\n\n:::\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example \n\nTo understand the process of pivoting and spreading a data frame, we will work with a very small toy example with grades. To create the dataset, we use the `tribble()` function to make a tibble.\n\nLet's start with pivoting a data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tribble(\n  ~student,   ~maths, ~physics,\n  'Alice',        18,       15,\n  'Bob',          14,       10,\n  'Charlie',       8,       16\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> pivot_longer(\n  cols = c(maths, physics),\n  names_to = 'course',\n  values_to = 'grade'\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.outputcode}\n# A tibble: 6 × 3\n  student course  grade\n  <chr>   <chr>   <dbl>\n1 Alice   maths      18\n2 Alice   physics    15\n3 Bob     maths      14\n4 Bob     physics    10\n5 Charlie maths       8\n6 Charlie physics    16\n```\n\n\n:::\n:::\n\n\n\nSpreading is the opposite transformation of pivoting.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tribble(\n  ~student,   ~course, ~grade,\n  'Alice',    \"maths\",     18,\n  'Alice',  \"physics\",     15,\n  'Bob',      \"maths\",     14,\n  'Bob',    \"physics\",     10,\n  'Charlie',  \"maths\",      8,\n  'Charlie',\"physics\",     16\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> pivot_wider(\n  names_from = 'course',\n  values_from = 'grade'\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.outputcode}\n# A tibble: 3 × 3\n  student maths physics\n  <chr>   <dbl>   <dbl>\n1 Alice      18      15\n2 Bob        14      10\n3 Charlie     8      16\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Cell splitting\n\nCell splitting in a data frame is the process of splitting a cell into multiple cells. This can be done for a variety of reasons, such as to extract data from a cell, to format data or to make the data tidy.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tribble(\n  ~student,      ~grades,\n  'Alice',    '18/15/20',\n  'Bob',      '14/10/12',\n  'Charlie',   '8/16/14'\n)\n\ndf |> separate_wider_delim(\n  cols = grades,\n  delim = '/',\n  names = c('maths', 'physics', 'french')\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  student maths physics french\n  <chr>   <chr> <chr>   <chr> \n1 Alice   18    15      20    \n2 Bob     14    10      12    \n3 Charlie 8     16      14    \n```\n\n\n:::\n:::\n\n\n\n:::\n\nPartitioning cells into multiple columns can be particularly advantageous, especially for tasks like date manipulation. While the `unite()` function is available to collapse cells across various columns, it is employed less frequently in practice.\n\n\n## Additional resources\n\n* The `tidyr` [website](https://tidyr.tidyverse.org).\n\n* `tidyr` [cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf).\n\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\n[Back](/weeks/week-2.qmd) ⏎\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}