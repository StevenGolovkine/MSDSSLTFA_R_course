{
  "hash": "c11d71e8a7f2969b7d0ce175ad481f6b",
  "result": {
    "markdown": "---\ntitle: \"Data visualisation with ggplot2\"\nengine: knitr\n---\n\n\n\n\n<br>\nThe `ggplot2` package is part of the `tidyverse` and is used to create complex and sophisticated visualisations of large data sets. The package uses the **grammar of graphics** (gg), a coherent system for building graphics. `ggplot2` creates graphics iteratively over several layers.\n\nFor all the examples in this section, we are going to use the wine quality dataset that we used previously. It can be loaded using:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv(\n    './ressource/wine_quality.csv',\n    col_types = 'idddddddddddi'\n) |> \n    mutate(quality = as.factor(quality))\n```\n:::\n\n\n## Creating a plot\n\nThe `ggplot()` function is used to create a plot. The function works on data frames rather than vectors like in base R. Once a basic plot has been created, it can be enhanced by adding more layers to it.\n\nA `ggplot()` has three key components:  \n\n1. **Data** - `ggplot()` requires a data frame to be supplied in tidy format.  \n2. **Mapping** - aesthetic mapping(s) between variables in the data and visual properties, defined with the function `aes()`. \n3. **Layer(s)** - at least one layer describing how to render (i.e. plot) each observation. Usually created using `geom()` functions.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example: a simple scatterplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df, # data\n    aes(x = alcohol, y = fixed_acidity)  # aesthetic\n) + \n  geom_point()  # layer\n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot1-1.png){width=672}\n:::\n:::\n\n\nThis produces a scatterplot defined by:\n\n1. **Data** - wine quality dataset (`df`)\n2. **Mapping** - alcohol by volume (`alcohol`) mapped to x axis, fixed acidity (`fixed_acidity`) to y axis\n3. **Layer** - points\n\n:::\n\n### The data\n\nThe first argument specified is the data frame to be used in the plotting process. In the first example, this is the `df` data frame. Using `ggplot(data = df)` will create an empty plot (try it!). We can then add layers to that plot. By default these layers will use the data specified in the `ggplot()` command, however we can change this behaviour if needed.\n\n### Mappings and aesthetics\n\nThe `aes()` command is a mapping from the columns in our data to aesthetics which are the visual properties of our plot.  In most scenarios this will map columns to the x and/or y-axes. We can also map columns of our data to colour, shape or size of the plotted points, for example.\n\n### Geometries\n\nLayers are added using **geometries** or `geom()` functions and the `+` operator. The `geom`s automatically inherit the default aesthetic mappings specified in the `ggplot()` command, however this behaviour can be modified. \n\nExamples include:\n\n* `geom_point()` - adds a layer of points to the plot\n* `geom_lines()` - adds a layer of lines to the plot\n* `geom_histogram()` - adds a histogram to the plot\n* `geom_boxplot()` - adds a boxplot to the plot\n* `geom_smooth()` - adds a smoother to the plot (please, be careful when using this function, the default behaviour might not be the expected one)\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example: a boxplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df,  # data\n    aes(x = alcohol)  # aesthetic\n) + \n    geom_boxplot()  # layer\n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot2-1.png){width=672}\n:::\n:::\n\n\nThis produces a boxplot defined by:\n\n1. **Data** - wine quality dataset (`df`)\n2. **Mapping** - alcohol by volume (`alcohol`) mapped to x axis\n3. **Layer** - boxplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df,  # data\n    aes(x = alcohol, y = 0)  # aesthetic\n) + \n    geom_boxplot() +  # layer 1\n    geom_jitter()  # layer 2 \n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot3-1.png){width=672}\n:::\n:::\n\n\nWe added another layer (`geom_jitter()`) to the previous plot.\n\n:::\n\n## Colour, size, shape attributes\n\nThe `aes()` argument can also map columns in the data frame to other aesthetics like colour, size and shape. To change the colour, shape and size of the points plotted in the scatterplot of alcohol by volume versus fixed acidity by quality:\n\n* `aes(x = alcohol, y = fixed_acidity, colour = quality)`\n* `aes(x = alcohol, y = fixed_acidity, shape = quality)`\n* `aes(x = alcohol, y = fixed_acidity, size = quality)`\n    \nggplot2 converts the data into aesthetics (e.g., ‘red’, ‘yellow’, ‘green’) with a scale. \n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\n* Change the color\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df, \n    aes(\n        x = alcohol, \n        y = fixed_acidity,\n        colour = quality  # Change color\n    )\n) + \n    geom_point()\n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot4-1.png){width=672}\n:::\n:::\n\n\n* Change the shape\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df, \n    aes(\n        x = alcohol, \n        y = fixed_acidity,\n        shape = quality  # Change shape\n    )\n) + \n    geom_point()\n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot5-1.png){width=672}\n:::\n:::\n\n\n* Change the size\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df, \n    aes(\n        x = alcohol, \n        y = fixed_acidity,\n        size = quality  # Change size\n    )\n) + \n    geom_point()\n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot6-1.png){width=672}\n:::\n:::\n\n\n* Change the color, shape and size\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df, \n    aes(\n        x = alcohol, \n        y = fixed_acidity,\n        colour = quality,  # Change color\n        shape = quality,  # Change shape\n        size = quality  # Change size\n    )\n) +  \n    geom_point() \n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot7-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## Labels and titles\n\nAxis labels can be added separately using the `+` operator and `xlab()` and/or `ylab()`. A plot title can be added using the `+` operator and `ggtitle()`. Using the `+` operator and the `labs()` function can add axis labels, plot title and plot sub-titles all in one step.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df,\n    aes(\n        x = alcohol,\n        y = fixed_acidity\n    )\n) +\n    geom_point() +\n    xlab(\"Alcohol by volume\") +  # Change x axis labels\n    ylab(\"Fixed acidity\") +  # Change y axis labels\n    ggtitle(\"Wine quality data\")  # Change title\n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df,\n    aes(\n        x = alcohol,\n        y = fixed_acidity,\n        colour = quality\n    )\n) +\n    geom_point() +\n    labs(\n        x = \"Alcohol by volume\",  # Change x axis labels\n        y = \"Fixed acidity\",  # Change y axis labels\n        title = \"Wine quality data\",  # Change title\n        subtitle = \"Scatterplot by quality\"  # Change subtitle\n    )\n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot9-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## Themes\n\nThemes allow you control over the non-data elements of your plot. These include the font, ticks, panel strips and background. The default theme in `ggplot()` is the grey theme (please do not use it...). Other themes that you can use are given [here](https://ggplot2-book.org/themes.html#sec-themes).\n\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\n* Using `theme_bw()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df, \n    aes(\n        x = alcohol, \n        y = fixed_acidity,\n        colour = quality\n    )\n) + \n    geom_point() +\n    theme_bw()  # Change to theme_bw\n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot10-1.png){width=672}\n:::\n:::\n\n\n* Using `theme_minimal()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = df, \n    aes(\n        x = alcohol, \n        y = fixed_acidity,\n        colour = quality\n    )\n) + \n    geom_point() +\n    theme_minimal()  # Change to theme_minimal\n```\n\n::: {.cell-output-display}\n![](06_ggplot_files/figure-html/plot11-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n## Additional resources\n\n* `ggplot2`: Elegant Graphics for Data Analysis [book](https://ggplot2-book.org).\n\n* The `ggplot2` [website](https://ggplot2.tidyverse.org).\n\n* `ggplot2` [cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf).\n\n* The coding club on [data visualisation](https://ourcodingclub.github.io/tutorials/dataviz-beautification-synthesis/).\n\n* A `ggplot2` [tutorial](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/) for beautiful plotting in R.\n\n* A [short talk](https://yegrug.github.io/data-vis-practice/ggplot2-intro_2021-12-16.html#1) on data visualisation with `ggplot2`.\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 02](/weeks/week-2.qmd) ⏎\n:::",
    "supporting": [
      "06_ggplot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}