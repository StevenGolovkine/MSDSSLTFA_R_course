{
  "hash": "1eb5338e57289200cdaccfa906e801b4",
  "result": {
    "markdown": "---\ntitle: \"Interactive graphics with plotly\"\nengine: knitr\n---\n\n\n<br>\nInteractive graphics enable users to explore data and gain insights more dynamically. This interactivity includes zooming, panning, hovering over data points for additional information, and selecting specific elements for deeper exploration. Nowadays, there are numerous R packages to create interactive plots. Here, we will focus on `plotly` as it is a general purposes data visualisation package and it works nicely with `ggplot2`.\n\nBefore you start, you will need to download and install the `plotly` package. We will also need the `tidyverse`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('plotly')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(plotly)\n```\n:::\n\n\nFor this section, we will use a dataset gathering information on US States ([link](https://github.com/rfordatascience/tidytuesday/tree/master/data/2023/2023-08-01)). The dataset is assumed to be loaded using:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv('./source/states.csv')\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.outputcode}\n# A tibble: 6 × 14\n  state postal_abbreviation capital_city largest_city admission  population_2020\n  <chr> <chr>               <chr>        <chr>        <date>               <dbl>\n1 Alab… AL                  Montgomery   Huntsville   1819-12-14         5024279\n2 Alas… AK                  Juneau       Anchorage    1959-01-03          733391\n3 Ariz… AZ                  Phoenix      Phoenix      1912-02-14         7151502\n4 Arka… AR                  Little Rock  Little Rock  1836-06-15         3011524\n5 Cali… CA                  Sacramento   Los Angeles  1850-09-09        39538223\n6 Colo… CO                  Denver       Denver       1876-08-01         5773714\n# ℹ 8 more variables: total_area_mi2 <dbl>, total_area_km2 <dbl>,\n#   land_area_mi2 <dbl>, land_area_km2 <dbl>, water_area_mi2 <dbl>,\n#   water_area_km2 <dbl>, n_representatives <dbl>, demonym <chr>\n```\n:::\n:::\n\n\n## Getting started\n\nThe plotting philosophy of `plotly` is similar to the one of `ggplot2` in the sense that the plot is created by adding **layers** of information. The plots created with `plotly` are highly customisable.\n\nThe figures are created using the `plot_ly()` function and the layout can be modified using the `layout()` function. If we assign variable names (e.g. `state`, `population_2020`, etc) to visual properties (e.g. `x`, `y`, `color`, etc), `plot_ly()` will try to create a sensible plot based on the information we provide. The behaviour can be changed by setting the `type` parameters.\n\n::: {.callout-note appearance=\"simple\"}\n\nNote that to assign a variable name to a visual property, we have to use the `~` symbol. For example, `x = ~population_2020` or `color = ~n_representatives`.\n\n:::\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nWe want a plot for the `n_representatives` variable and `plot_ly()` choose to do a bar plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_ly(data = df, x = ~n_representatives)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-d19d64e0ccd208fa42d5\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d19d64e0ccd208fa42d5\">{\"x\":{\"visdat\":{\"3081500df02d\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"3081500df02d\",\"attrs\":{\"3081500df02d\":{\"x\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"n_representatives\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[7,1,9,4,52,8,5,1,28,14,2,2,17,9,4,4,6,6,2,8,9,13,8,4,8,2,3,4,2,12,3,26,14,1,15,5,6,17,2,7,1,9,38,4,1,11,10,2,8,1],\"type\":\"histogram\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n:::\n\nThe `plotly` package considers a functional approach to plotting, in the sense, that most of the functions in this package take a `plotly` object as argument and return a modified version of this object. We use the `plot_ly()` function to define the plot and use the `add_*()` functions (e.g., `add_lines()`, `add_trace()`, ...) that define how the data is rendered.\n\nIt is important to note that:\n\n* Arguments specified in `plot_ly()` are **global**, so any downstream `add_*()` functions inherit theses arguments, except if `inherit = FALSE`.\n\n* Data manipulation verbs from the `dplyr` package may be used to transform the data underlying a `plotly` object. We use the `plotly_data()` to obtain the data at any point in the code.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nWe do the same plot as before, but this time, we add the number of states with a certain number of representatives. This is done directly in the plot definition without the need to create a new dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_ly(\n    data = df,\n    x = ~factor(n_representatives)  # Globally assign x\n) |> \n    add_histogram() |>  # Add a histogram layer\n    group_by(n_representatives) |> \n    summarise(n = n()) |>  # Modify the data in the plotly object\n    add_text(  # Add a layer of text, x is the same as before\n        text = ~n, y = ~n, \n        textposition = \"top middle\", \n        cliponaxis = FALSE\n    )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-d51fe6440d3e18537f06\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d51fe6440d3e18537f06\">{\"x\":{\"visdat\":{\"308125af068d\":[\"function () \",\"plotlyVisDat\"],\"30815d7264f\":[\"function () \",\"data\"],\"308170140f87\":[\"function () \",\"data\"]},\"cur_data\":\"308170140f87\",\"attrs\":{\"308125af068d\":{\"x\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"histogram\",\"inherit\":true},\"308170140f87\":{\"x\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"y\":{},\"text\":{},\"type\":\"scatter\",\"mode\":\"text\",\"textposition\":\"top middle\",\"cliponaxis\":false,\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"factor(n_representatives)\",\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"17\",\"26\",\"28\",\"38\",\"52\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"n\"},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[\"7\",\"1\",\"9\",\"4\",\"52\",\"8\",\"5\",\"1\",\"28\",\"14\",\"2\",\"2\",\"17\",\"9\",\"4\",\"4\",\"6\",\"6\",\"2\",\"8\",\"9\",\"13\",\"8\",\"4\",\"8\",\"2\",\"3\",\"4\",\"2\",\"12\",\"3\",\"26\",\"14\",\"1\",\"15\",\"5\",\"6\",\"17\",\"2\",\"7\",\"1\",\"9\",\"38\",\"4\",\"1\",\"11\",\"10\",\"2\",\"8\",\"1\"],\"type\":\"histogram\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"17\",\"26\",\"28\",\"38\",\"52\"],\"y\":[6,7,2,6,2,3,2,5,4,1,1,1,1,2,1,2,1,1,1,1],\"text\":[6,7,2,6,2,3,2,5,4,1,1,1,1,2,1,2,1,1,1,1],\"type\":\"scatter\",\"mode\":\"text\",\"textposition\":[\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\",\"top middle\"],\"cliponaxis\":false,\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n:::\n\n\nThe plots created with `plot_ly()` are very customisable. The `layout()` function is used to add and modify part of the graphics. For example, we can change the title, axis, grid or legend using this function. It works simularly to the `theme()` function in `ggplot2`. We select the element we want to modify (e.g., the `xaxis`) and we create a list of the characteristics we desire (e.g., `list(title = 'Population', color = 'red')`).\n\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nA pretty complete example to create a scatter plot in `plotly`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_ly(\n    data = df,\n    type = 'scatter',\n    mode = 'markers',\n    x = ~population_2020,\n    y = ~total_area_mi2,\n    text = ~paste(\n        'Population:', population_2020,\n        '\\nTotal area in mi^2:', total_area_mi2,\n        '\\nNumber of representative:', n_representatives\n    ),\n    marker = list(\n        color = ~n_representatives, \n        colorbar = list(\n            title = \"Number of representatives\",\n            orientation = 'h'\n        ),\n        colorscale = 'Viridis',\n        showscale = TRUE\n    )\n) |> \n    layout(\n        title = 'Population vs Total Area of American States (in 2020)',\n        xaxis = list(title = 'Population', color = 'red'),\n        yaxis = list(title = \"Total area in miles squared\")\n    )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-c600fc11c1793107c49e\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c600fc11c1793107c49e\">{\"x\":{\"visdat\":{\"30817ff4b2e\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"30817ff4b2e\",\"attrs\":{\"30817ff4b2e\":{\"mode\":\"markers\",\"x\":{},\"y\":{},\"text\":{},\"marker\":{\"color\":{},\"colorbar\":{\"title\":\"Number of representatives\",\"orientation\":\"h\"},\"colorscale\":\"Viridis\",\"showscale\":true},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Population vs Total Area of American States (in 2020)\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Population\",\"color\":\"red\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Total area in miles squared\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"mode\":\"markers\",\"x\":[5024279,733391,7151502,3011524,39538223,5773714,3605944,989948,21538187,10711908,1455271,1839106,12812508,6785528,3190369,2937880,4505836,4657757,1362359,6177224,7029917,10077331,5706494,2961279,6154913,1084225,1961504,3104614,1377529,9288994,2117522,20201249,10439388,779094,11799448,3959353,4237256,13002700,1097379,5118425,886667,6910840,29145505,3271616,643077,8631393,7705281,1793716,5893718,576851],\"y\":[52420,665384,113990,53179,163695,104094,5543,2489,65758,59425,10932,83569,57914,36420,56273,82278,40408,52378,35380,12406,10554,96714,86936,48432,69707,147040,77348,110572,9349,8723,121590,54555,53819,70698,44826,69899,98379,46054,1545,32020,77116,42144,268596,84897,9616,42775,71298,24230,65496,97813],\"text\":[\"Population: 5024279 <br />Total area in mi^2: 52420 <br />Number of representative: 7\",\"Population: 733391 <br />Total area in mi^2: 665384 <br />Number of representative: 1\",\"Population: 7151502 <br />Total area in mi^2: 113990 <br />Number of representative: 9\",\"Population: 3011524 <br />Total area in mi^2: 53179 <br />Number of representative: 4\",\"Population: 39538223 <br />Total area in mi^2: 163695 <br />Number of representative: 52\",\"Population: 5773714 <br />Total area in mi^2: 104094 <br />Number of representative: 8\",\"Population: 3605944 <br />Total area in mi^2: 5543 <br />Number of representative: 5\",\"Population: 989948 <br />Total area in mi^2: 2489 <br />Number of representative: 1\",\"Population: 21538187 <br />Total area in mi^2: 65758 <br />Number of representative: 28\",\"Population: 10711908 <br />Total area in mi^2: 59425 <br />Number of representative: 14\",\"Population: 1455271 <br />Total area in mi^2: 10932 <br />Number of representative: 2\",\"Population: 1839106 <br />Total area in mi^2: 83569 <br />Number of representative: 2\",\"Population: 12812508 <br />Total area in mi^2: 57914 <br />Number of representative: 17\",\"Population: 6785528 <br />Total area in mi^2: 36420 <br />Number of representative: 9\",\"Population: 3190369 <br />Total area in mi^2: 56273 <br />Number of representative: 4\",\"Population: 2937880 <br />Total area in mi^2: 82278 <br />Number of representative: 4\",\"Population: 4505836 <br />Total area in mi^2: 40408 <br />Number of representative: 6\",\"Population: 4657757 <br />Total area in mi^2: 52378 <br />Number of representative: 6\",\"Population: 1362359 <br />Total area in mi^2: 35380 <br />Number of representative: 2\",\"Population: 6177224 <br />Total area in mi^2: 12406 <br />Number of representative: 8\",\"Population: 7029917 <br />Total area in mi^2: 10554 <br />Number of representative: 9\",\"Population: 10077331 <br />Total area in mi^2: 96714 <br />Number of representative: 13\",\"Population: 5706494 <br />Total area in mi^2: 86936 <br />Number of representative: 8\",\"Population: 2961279 <br />Total area in mi^2: 48432 <br />Number of representative: 4\",\"Population: 6154913 <br />Total area in mi^2: 69707 <br />Number of representative: 8\",\"Population: 1084225 <br />Total area in mi^2: 147040 <br />Number of representative: 2\",\"Population: 1961504 <br />Total area in mi^2: 77348 <br />Number of representative: 3\",\"Population: 3104614 <br />Total area in mi^2: 110572 <br />Number of representative: 4\",\"Population: 1377529 <br />Total area in mi^2: 9349 <br />Number of representative: 2\",\"Population: 9288994 <br />Total area in mi^2: 8723 <br />Number of representative: 12\",\"Population: 2117522 <br />Total area in mi^2: 121590 <br />Number of representative: 3\",\"Population: 20201249 <br />Total area in mi^2: 54555 <br />Number of representative: 26\",\"Population: 10439388 <br />Total area in mi^2: 53819 <br />Number of representative: 14\",\"Population: 779094 <br />Total area in mi^2: 70698 <br />Number of representative: 1\",\"Population: 11799448 <br />Total area in mi^2: 44826 <br />Number of representative: 15\",\"Population: 3959353 <br />Total area in mi^2: 69899 <br />Number of representative: 5\",\"Population: 4237256 <br />Total area in mi^2: 98379 <br />Number of representative: 6\",\"Population: 13002700 <br />Total area in mi^2: 46054 <br />Number of representative: 17\",\"Population: 1097379 <br />Total area in mi^2: 1545 <br />Number of representative: 2\",\"Population: 5118425 <br />Total area in mi^2: 32020 <br />Number of representative: 7\",\"Population: 886667 <br />Total area in mi^2: 77116 <br />Number of representative: 1\",\"Population: 6910840 <br />Total area in mi^2: 42144 <br />Number of representative: 9\",\"Population: 29145505 <br />Total area in mi^2: 268596 <br />Number of representative: 38\",\"Population: 3271616 <br />Total area in mi^2: 84897 <br />Number of representative: 4\",\"Population: 643077 <br />Total area in mi^2: 9616 <br />Number of representative: 1\",\"Population: 8631393 <br />Total area in mi^2: 42775 <br />Number of representative: 11\",\"Population: 7705281 <br />Total area in mi^2: 71298 <br />Number of representative: 10\",\"Population: 1793716 <br />Total area in mi^2: 24230 <br />Number of representative: 2\",\"Population: 5893718 <br />Total area in mi^2: 65496 <br />Number of representative: 8\",\"Population: 576851 <br />Total area in mi^2: 97813 <br />Number of representative: 1\"],\"marker\":{\"color\":[7,1,9,4,52,8,5,1,28,14,2,2,17,9,4,4,6,6,2,8,9,13,8,4,8,2,3,4,2,12,3,26,14,1,15,5,6,17,2,7,1,9,38,4,1,11,10,2,8,1],\"colorbar\":{\"title\":\"Number of representatives\",\"orientation\":\"h\"},\"colorscale\":\"Viridis\",\"showscale\":true,\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"type\":\"scatter\",\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n:::\n\n\n\n## Make a ggplot interactive\n\nMaking a `ggplot` interactive is very easy. The package `plotly` provides the function `ggplotly()` that does all the job. The function takes a `ggplot` object as input and return a `plotly` object. As it returns a `plotly` object, we can use all the formatting elements on it.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nWe can create a simple plot using `ggplot2`:\n\n::: {.cell}\n\n```{.r .cell-code}\ngg <- ggplot(df) +\n    geom_point(\n        aes(x = population_2020, y = total_area_mi2, text = state)\n    ) +\n    xlab('Population in 2020') +\n    ylab('Total area in square miles') +\n    theme_bw()\ngg\n```\n\n::: {.cell-output-display}\n![](01_interactive_graphics_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nAnd then, make it interactive using the `ggplotly()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplotly(gg, tooltip = 'text')\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-bb4c51f587893592eb67\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-bb4c51f587893592eb67\">{\"x\":{\"data\":[{\"x\":[5024279,733391,7151502,3011524,39538223,5773714,3605944,989948,21538187,10711908,1455271,1839106,12812508,6785528,3190369,2937880,4505836,4657757,1362359,6177224,7029917,10077331,5706494,2961279,6154913,1084225,1961504,3104614,1377529,9288994,2117522,20201249,10439388,779094,11799448,3959353,4237256,13002700,1097379,5118425,886667,6910840,29145505,3271616,643077,8631393,7705281,1793716,5893718,576851],\"y\":[52420,665384,113990,53179,163695,104094,5543,2489,65758,59425,10932,83569,57914,36420,56273,82278,40408,52378,35380,12406,10554,96714,86936,48432,69707,147040,77348,110572,9349,8723,121590,54555,53819,70698,44826,69899,98379,46054,1545,32020,77116,42144,268596,84897,9616,42775,71298,24230,65496,97813],\"text\":[\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":5.6692913385826778,\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.228310502283108,\"r\":7.3059360730593621,\"b\":40.182648401826498,\"l\":54.794520547945211},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-1371217.6000000001,41486291.600000001],\"tickmode\":\"array\",\"ticktext\":[\"0e+00\",\"1e+07\",\"2e+07\",\"3e+07\",\"4e+07\"],\"tickvals\":[0,9999999.9999999981,20000000,30000000,40000000],\"categoryorder\":\"array\",\"categoryarray\":[\"0e+00\",\"1e+07\",\"2e+07\",\"3e+07\",\"4e+07\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Population in 2020\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-31646.950000000004,698575.94999999995],\"tickmode\":\"array\",\"ticktext\":[\"0e+00\",\"2e+05\",\"4e+05\",\"6e+05\"],\"tickvals\":[0,200000.00000000003,400000.00000000006,600000],\"categoryorder\":\"array\",\"categoryarray\":[\"0e+00\",\"2e+05\",\"4e+05\",\"6e+05\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Total area in square miles\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(51,51,51,1)\",\"width\":0.66417600664176002,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"30812e72ca7e\":{\"x\":{},\"y\":{},\"text\":{},\"type\":\"scatter\"}},\"cur_data\":\"30812e72ca7e\",\"visdat\":{\"30812e72ca7e\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n:::\n\n\n## Configuration\n\nThe `plotly` package also includes a `config()` function that can be used to set the configuration options of the figures (by default, the top-right buttons, named the modebar). For example, we can enable the scroll zoom by setting `scrollZoom = TRUE` or make a static chart with `staticPlot = TRUE`. \n\nMost of the configuration options are [here](https://plotly.com/r/configuration-options/).\n\n## Additional resources\n\n* Plotly R [documentation](https://plotly.com/r/).\n\n* Plotly with `ggplot2` [documentation](https://plotly.com/ggplot2/).\n\n* Interactive web-based data visualization with R, plotly and shiny [book](https://plotly-r.com).\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 06](/weeks/week-6.qmd) ⏎\n:::",
    "supporting": [
      "01_interactive_graphics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.2/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}