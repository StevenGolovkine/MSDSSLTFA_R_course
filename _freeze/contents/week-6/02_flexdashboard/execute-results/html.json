{
  "hash": "f4914871cb141dfff04e03a380677a48",
  "result": {
    "markdown": "---\ntitle: \"Interactive dashboard with flexdashboard\"\nengine: knitr\n---\n\n\n<br>\nDashboards are a means of creating dynamic and user-friendly data visualisations. In R, we usually use the `flexdashboard` package. A `flexdashboard` is a dashboard that is based on R Markdown (the compatibility with Quarto is planned but not yet implemented). Dashboards are the next step towards building a fully interactive web app, but are much easier to create and do not require such a steep learning curve. Flexdashboards also easy to publish and share.\n\nFlexdashboards are implemented in a way that they will intelligently re-size to fill a browser window and will display appropriately on other mobile devices such as mobile phones. They can contain many components including htmlwidets (like `plotly` plots), `ggplot2` graphics, tables, gauges, value boxes and text.\n\nBefore you start, you will need to download and install the `flexdashboard` and `DT` packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('flexdashboard')\ninstall.packages('DT')\n```\n:::\n\n\n## Getting started\n\nA `flexdashboard` is based on R Markdown. The package provides template files to get you started. To open a template file, in RStudio, we could go to *New file > R Markdown*. In the pop-up window (@fig-flexdashboard), click *From Template* and select *Flex Dashboard* from the list of templates. This will open a pre-populated R Markdown file with a `flexdashboard` template to get you started.\n\n::: {#fig-flexdashboard}\n\n![](./images/flexdashboard.png)\n\nCreation of a dashboard using `flexdashboard`.\n\n:::\n\n\n\n\nSlide 6:\nP1: Instead we will work with a sample file that you have been provided with, that is based on the credit default dataset.\n\nP2: Create a new R Project, and save two files to it: the Sample_Flexdashboard_Credit_Default.Rmd file and the cleaned version of the credit default data.\n\nP3: Next open the .Rmd file and notice the YAML header. It has two lines title: and output: which is currently set to html_document (this is exactly as we saw in the previous section).\n\nClick on the Knit button and view the rendered output file.\n\nSlide 7:\nYou should see the following at the top of the rendered file. \n\nIt is in simple HTML format with a few different (level 3 – notice the 3 hash symbols) section headings (ggplot2 plots, Tables, htmlwidgets and text) with the corresponding code and output.\n\nSlide 8:\nP1: Let’s take a look at the YAML. \n\nRemember, the default YAML header for a standard R Markdown file has two lines, a title (here it is set to Untitled but in the sample file it is set to Flexdashboard example), and the output option is html_document.\n\nP2: To create a flexdashboard as our output, we simply change the output option to flexdashboard::flex_dashboard as shown here.\n\nSlide 9:\nP1: Make this change to the YAML header in the Sample_Flexdashboard_Credit_Default.Rmd file and re-knit the file.\n\nP2: Look at what has happened to the output!\n\nSlide 10:\nYou have just created your first flexdashboard by making one simple change to the YAML and you should see the following.\n\nEach chunk of output corresponding to the level 3 headers, has its own box in the dashboard. These are displayed one on top of the other by default. We will see how to change this behaviour later.\n\nSlide 11:\nP1: Of course, the layout of the dashboard is very basic, not very pleasing to look at, and needs some work.\n\nP2: The following sections will outline how to customise this layout and add other components, that are specific to flexdashboards, to make it more useful.\n7.2_Adding text_slides:\n\nSlide 1:\nThis video will outline how to add text to a flexdashboard, either as a banner at the top of the dashboard, as a sidebar, or adding some text to a box in the dashboard.\n\nSlide 2:\nP1: Flexdashboards are primarily a graphical tool and so it’s best to avoid using too much text.\n\nP2: However, some text is often necessary to describe various aspects of the dashboard. \n\nP3: You could add text as a header to the flexdashboard, as a side-panel, or add some text to a panel associated with a particular plot.\n\nSlide 3:\nP1: To add text as a header to the flexdashboard, put the text at the top of the .Rmd file.\n\nP2: To try this, cut the text from underneath the `### Text` header in the sample file and paste the text to the top of the sample flexdashboard file.\n\nP3: Delete the `### Text` header completely.\n    \nP4: Re-knit the file and view the results.\n\nSlide 4:\nThis shows the R Markdown file. I have moved the text from the bottom of the file and pasted it at the top of the file, before the first level 3 header, ### ggplot2 plots.\n\nNote that the text itself is no longer under the level 3 header ### text. \n\nSlide 5:\nWhen the file is rendered, this is what will appear. \n\nThe text is in a panel at the top of the flexdashboard. If we add multiple pages to this dashboard, the text will appear in all of them. We’ll see later how to move this text to a side-panel rather than at the top of the dashboard as here.\n\nAlso note that the box containing the text (when it was under the header ### text) is gone from the dashboard.\n\nSlide 6:\nP1: Text can also be added to an individual box(es) that contain a plot. \n\nP2: To do this, write the text directly under the relevant level 3 header. \n\nP3: Let's see how to do this in the sample file.\n\n\n\nSlide 7:\nTo add a line of text to the box containing the histogram, go to the ### ggplot2 plots header and add the text shown directly underneath that header. It doesn’t matter if it is before or after the code. \n\nRe-knit the file…\n\nSlide 8:\nWhen the dashboard renders, you’ll see the text appear inside the box containing the ggplot as expected.\n \n7.3_Layout_slides:\nSlide 1:\nThis video will demonstrate how to alter the layout of the flexdashboard in a variety of ways.\n\nSlide 2:\nP1: Flexdashboards are divided into rows and columns (like the plotting window in R).\n\nP2: Remember that the boxes that are displayed, typically with a chart included, are created using level 3 headers, i.e. use 3 hash symbols before the box name. (the box names will be displayed in the dashboard).\n\nP3: By default, the boxes are displayed in a single column with multiple rows. In the sample file, there should now be 3 boxes all stacked on top of one another in the dashboard.\n\nP4: This doesn’t look very nice and the plots are squashed and stretched. We’ll see how to change that format to display the boxes is a more pleasing way.\n\nSlide 3:\nP1: First let’s change the layout and displaying the boxes (and their output) column by column.\n\nP2: There are two equivalent ways to add columns to a flexdashboard.\n\n1.\tUse level two headers (i.e. 2 hash symbols with a column name, or simply the word column. Level 2 headers are not displayed in the rendered dashboard!)\n2.\tSpecify a column name (or just the word column) followed by a row of dashes directly underneath.\n\nP3: Specifying level 3 headers underneath the column headers will mean that these are then stacked within each column.\n\nSlide 4:\nP1: Here is an empty file showing out this is achieved. \n\nThe YAML header is as before. But now I have used level 2 headers to specify each column. I have used the same name for each as these are not displayed in the rendered dashboard.\n\nUnder the first column, I have specified that this will include a single chart using the level 3 header.\n\nIn the second column, I have specified that there are two charts. These charts will be stacked within that column. \n\nSlide 5:\nThis shows the alternative approach, where instead of using level 2 headers we specify the word Column (or you could use a column name) and a line of dashes underneath. \n\nBoth approaches are completely equivalent but many people choose this version as they can see the layout of the dashboard more easily.\n\n\nSlide 6:\nIn both scenarios, knitting this R Markdown file produces the following dashboard with a single box in column 1 containing Chart 1, and 2 boxes in column 2, containing Chart 2 and Chart 3.\n\nSlide 7:\nP1: The layout can also be displayed row by row.\n\nP2: Again there are two equivalent ways to do this. \n\n1.\tUse level 2 headers (PLUS CHANGE THE YAML header)\n2.\tSpecify a row name (which won’t be displayed) and use a set of dashes underneath (PLUS CHANGE THE YAML HEADER)\n\nP3: The boxes containing the output will be displayed row by row.\n\nSlide 8:\nP1: This is an empty file showing out this is achieved. \n\nI have used level 2 headers to specify each row. I have used the same name for each as these are not displayed in the rendered dashboard.\n\nIn the first row, I have specified that this will include a single chart using the level 3 header.\n\nIn the second row, I have specified that there are two charts. These charts will be side-by-side within that row. \n\nNotice that I have also had to change the YAML header to specify that the orientation is by rows.\n\nSlide 9:\nThis slide shows the alternative approach, using the row name and line of dashes.\n\nAs before, both approaches are completely equivalent but many people choose this version to make the code more readable.\n\nSlide 10:\nThe rendered dashboard is shown here.\n\nNow there are two rows: one at the top containing chart 1 and a second row underneath containing chart 2 and chart 3.\n\n\n\n\n\n\n\n\nSlide 11:\nP1: We can have multiple pages in a flexdashboard, which are created using a level 1 header (a header with a single #).\n\nP2: All of the content under the **# Page 1** header will appear on page 1, the content under the **# Page 2** header will appear on page 2, and so on.\n\nP3: This time the header names that you use for each page will be printed on the flexdashboard.\n\n\nSlide 12:\nHere we can see how to do this. There are two pages in this flexdashboard, which will have the names Page 1 and Page 2. \n\nOn Page 1 there will be two rows. Chart 1 will appear in row 1, chart 2 will appear in row 2.  \n\nOn page 2 there is only a single chart displayed.\n\nSlide 13:\nHere is Page 1 of the rendered dashboard with the two rows containing chart 1 and chart 2\n\nSlide 14:\nHere is Page 2 of the rendered dashboard with just chart 3 displayed.\n\nSlide 15:\nP1: We saw earlier in the credit default sample flexdashboard file how to include text that appeared at the top of the flexdashboard.\n\nP2: If we have multiple pages, this text will appear at the top of all pages created in the dashboard.\n\nP3: We can move that text to a sidebar on the flexdashboard using the `{.sidebar}` option.\n\nSlide 16:\nAs a reminder, this shows the location of some text at the top of the .Rmd file \n\nSlide 17:\nAnd how it is rendered and displayed on the resulting dashboard. Notice its location at the top.\n\nSlide 18:\nTo add a side bar, we create a new page for the text using a level 1 header. The name used here for the header will not appear in the rendered dashboard because the {.sidebar} option is used. \n\nSlide 19:\nThe rendered dashboard looks like the following. The text has now moved to a sidebar on the dashboard, and this will appear on each page that has been created.\n\nSlide 20:\nP1: In summary: Each Level 1 Header (#) begins a new page in the dashboard. The names used in the header will be displayed in the dashboard.\n\nP2: Each Level 2 Header (##) begins a new row (or column depending on the orientation you have chosen). The names used in the header will not be displayed in the dashboard. \n\nP3: Each Level 3 Header (###) begins a new box. The names used in the header will be displayed in the dashboard.\n\nP4: There are many other elements that you can modify by using attributes, such as the `{.sidebar}` option.\n\nSlide 21:\nP1: Using the credit default sample dashboard, try changing the layout by column and then by row. \n\nP2:  Split the dashboard into two pages with names of your choice.\n\nP3:  Put the text (that should now be at the top of the credit default sample file) into a sidebar.\n\nP4: Knit the file each time and view the results.\n\nP5: Finally, choose the layout that you like best.\n \n7.4_Components_slides:\nSlide 1:\nThis video will demonstrate how to add components called value boxes and gauges to a flexdashboard, and show how to add links to social media and embedded source code to the dashboard.\n\nSlide 2:\nP1: Graphs and tables aren’t the only options for presenting data in a flexdashboard. Flexdashboards also offer the option of adding various components as an alternative way to present information.\n\nP2: Components include value boxes and gauges.\n\nP3: We’ll also see how to add links to social media sites such as Twitter, Facebook, LinkedIn (or the entire menu of these)\n\nPlus how to embed a link to the source code creating the dashboard so that others can use your work.\n\nIn order to use these components you will need to have an r code chunk (e.g. setup or load-packages chunk) which loads the flexdashboard package using the library command.\n\nSlide 3:\nP1: The first component is a value box. These typically display since numeric values along with a title (description) and an optional icon such as this one shown here.\n\nP2: These are created using the valueBox() function in the flexdashboard package.\n\nP3: The background colour of the value box is often chosen to be a meaningful colour. For example if the value is too large and out of spec, the box might be red.\n\nSlide 4:\nP1: The 3 main arguments in the value box function are:\n1.\tValue (the number or sometimes text to display in the box)\n2.\tIcon – an icon to print in the box\n3.\tColor – the background colour of the box\n\nP2: When choosing an icon to use there are 3 sets of icons that value box recognises. These are listed here and the associated websites linked.\n\nP3: When specifying the icon argument in the valuebox function, you need to use the icon’s full name plus the relevant prefix, e.g. if you are using font awesome icons, the prefix is fa. \n\n\n\n\n\n\n\n\n\nSlide 5:\nTo create a set of 3 value boxes, this is the relevant code. These will be created and displayed on the first page (Page 1) of the dashboard.\n\nFirst create a new row using a level 2 header and under the page you want the value box(es) to appear. Here that is Page 1 of the dashboard.\n\nThe next 3 R code chunks create different value boxes.\n\nThe level 3 headers are used as the value box names. \n\nThe first value box will have the name “Articles per day”, the value displayed will be 45 and the icon used will be a pencil icon from the font awesome icon set.\nThe second value box will be called “Comments per day”, display the value 126 and an icon called comments from the font awesome icon set.\n\nFinally, the third value box will have a set value for spam, a trash icon, and the colour will change depending on the value of spam. If spam is greater than 10, the “warning’ colour will be used (here orange), otherwise the primary colour will be used (here blue).\n\nSlide 6:\nKnitting this updated file gives the following output. The row of value boxes appears at the top of the dashboard.\n\nNote the values displayed, the icons used and the colour of the boxes.\n\nSlide 7:\nP1: Another type of component offered in flexdashboards is a gauge. A gauge displays a value on a meter as shown below.\n\nP2: To create a gauge, simply use the gauge() function in the Markdown file.\n\nP3: Like value boxes, the colours of the gauge are meaningful to the user.\n\nSlide 8:\nP1: The main arguments of the gauge function are:\n1.\tValue – the value to display\n2.\tMin – the minimum value displayed on the gauge (usually 0)\n3.\tMax – the maximum value displayed on the gauge\n4.\tSectors – custom coloured sectors. If the value is in a particular range the gauge will be green, if the value is in another range the gauge will be orange and if the value is in the final range the gauge will be red.\n\nP2: A gauge is created in a very similar way to a value box.\n\n\n\n\n\n\nSlide 9:\nTo demonstrate this, let’s change the final value box displayed the spam numbers to a gauge as shown.\n\nWe create a box using a level 3 header (here we leave the spam per day) and then use the gauge function. \n\nNote the value, the minimum value on the gauge is 0, the maximum is 20.\n\nFinally the sectors are defined using gaugeSectors. A success is spam numbers below 7, a warning is if spam numbers are between 7 and 14 and danger if spam numbers are above 14. The words “success”, “warning” and “danger” are mapped to the colours green, amber and red.\n\nSlide 10:\nThe rendered dashboard is shown here. The 3 location is now a gauge. \n\nThe colour of the gauge is red as spam is 15 (which is more than the danger limit of 14). 0 is the minimum value displayed and 20 is the max.\n\nSlide 11:\nP1: Social media links can be added to the flexdashboard if you want to share your work.\n\nP2: You can also embed a link to the source code underpinning the dashboard.\n\nP3: Both are achieved by editing the YAML header.\n\nSlide 12:\nTo add social media links, specify the social option in the YAML header. There are several options to choose here including twitter, linkedin, etc. However choosing menu as here adds them all. \n\nTo embed a link to the source code use the source_code option and choose embed.\n\nSlide 13:\nWhen you knit the file the following will be displayed. \n\nNotice the symbols in the top right corner of the dashboard.\n\nClicking on the social media symbol displays the social media options available.\n\nSlide 14:\nClicking on the source code link brings up this screen – all of the code used to create the dashboard! Other users can now copy this code and use it for their own dashboards.\n\n\n\n\n\n\n\n\nSlide 15:\nP1: Try adding value boxes and gauges to the credit default sample file.\n\nP2: Add a social media link.\n\nP3: Add the embedded source code link.\n\nP4: In each scenario, Knit the file and view the results.\n \n\n## Additional resources\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 06](/weeks/week-6.qmd) ⏎\n:::",
    "supporting": [
      "02_flexdashboard_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}