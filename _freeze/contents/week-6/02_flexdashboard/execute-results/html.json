{
  "hash": "ea286c2d964bb585b0ff4ce1dc081177",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Interactive dashboard with flexdashboard\"\nengine: knitr\n---\n\n\n\n<br>\nDashboards are a means of creating dynamic and user-friendly data visualisations. In R, we usually use the `flexdashboard` package. A `flexdashboard` is a dashboard that is based on R Markdown (the compatibility with Quarto is planned but not yet implemented). Dashboards are the next step towards building a fully interactive web app, but are much easier to create and do not require such a steep learning curve. Flexdashboards also easy to publish and share.\n\nFlexdashboards are implemented in a way that they will intelligently re-size to fill a browser window and will display appropriately on other mobile devices such as mobile phones. They can contain many components including htmlwidets (like `plotly` plots), `ggplot2` graphics, tables, gauges, value boxes and text.\n\nBefore you start, you will need to download and install the `flexdashboard` and `DT` packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('flexdashboard')\ninstall.packages('DT')\n```\n:::\n\n\n\n## Getting started\n\nA `flexdashboard` is based on R Markdown. The package provides template files to get you started. To open a template file, in RStudio, we could go to *New file > R Markdown*. In the pop-up window (@fig-flexdashboard), click *From Template* and select *Flex Dashboard* from the list of templates. This will open a pre-populated R Markdown file with a `flexdashboard` template to get you started. Then, click `Knit` to view the rendered output file.\n\n::: {#fig-flexdashboard}\n\n![](./images/flexdashboard.png)\n\nCreation of a dashboard using `flexdashboard`.\n\n:::\n\nLet’s take a look at the YAML header. Remember, the default YAML header for a standard R Markdown file has two lines, a title (here it is set to *Untitled*), and the output option is `html_document`. To create a `flexdashboard`, we simply change the output option to `flexdashboard::flex_dashboard`. The `orientation` and `vertical_layout` parts are parameters that defined the dashboard.\n\nEven if the template file is pretty empty, we remark that each chunk of output corresponding to the level 3 headers (`###`), has its own box in the dashboard. We can modify the disposition of the box using `Column {data-width=*}` followed by a line of dash (`-`) (more on that in a next section).\n\n## Text descriptions\n\nDashboards are primarily a graphical tool and so it is usually preferable to avoid using too much text. However, some text is often necessary to describe various aspects of the dashboard. We could add text as a header to the `flexdashboard`, as a side-panel, or add some text to a panel associated with a particular plot.\n\nTo add text as a header to the flexdashboard, simply put the text at the top of the .Rmd file (but after the YAML...), before any lever 3 header. Note that the text is in a panel at the top of the dashboard. If we add multiple pages to this dashboard, the text will appear in all of them.\n\nText can also be added to an individual box(es) that contain a plot. To do this, write the text directly under the relevant level 3 header. \n\n## Layout\n\nFlexdashboards are divided into rows and columns. Remember that the boxes that are displayed, typically with a chart included, are created using level 3 headers, before the box names. \n\n### By columns\n\nBy default, the boxes are displayed in a single column with multiple rows. In the template file, there should now be three boxes. The box A is displayed in the first column, while the boxes B and C are displayed in the second columns and stacked on each other.\n\nThere are two equivalent ways to add columns to a flexdashboard.\n\n1. Use level two headers (i.e. 2 hash symbols with a column name, or simply the word column. Level 2 headers are not displayed in the rendered dashboard!)\n\n```yaml\n---\noutput:\n    flexdashboard::flex_dashboard:\n        orientation: columns\n---\n\n## Column\n```\n\n2. Specify a column name (or just the word column) followed by a row of dashes directly underneath.\n\n```yaml\n---\noutput:\n    flexdashboard::flex_dashboard:\n        orientation: columns\n---\n\nColumn\n------\n```\n\nSpecifying level 3 headers underneath the column headers will mean that these are then stacked within each column.\n\n### By rows\n\nThe layout can also be displayed row by row. Again, there are two equivalent ways to do this. \n\n1.\tUse level 2 headers and change the YAML header\n\n```yaml\n---\noutput:\n    flexdashboard::flex_dashboard:\n        orientation: rows\n---\n\n## Row\n```\n\n2.\tSpecify a row name, use a set of dashes underneath and change the YAML header.\n\n```yaml\n---\noutput:\n    flexdashboard::flex_dashboard:\n        orientation: rows\n---\n\nRow\n---\n```\n\nIf you change the orientation in the template file, there are two rows: one at the top containing box A and a second row underneath containing box B and box C.\n\n### Multiple pages\n\nWe can have multiple pages in a dashboard, which are created using a level 1 header (`#`). All of the content under the **# First page** header will appear on page 1, the content under the **# Second page** header will appear on page 2, and so on. This time the header names that we use for each page will be printed on the dashboard.\n\nThis is how we can do it. There are two pages in this `flexdashboard`, which will have the names **First page** and **Second page**. \n\n```markdown\n# First page\n\nAdd some boxes and plots\n\n# Second page\n\nAdd some boxes and plots\n```\n\n### Sidebar\n\nWe saw in a previous section how to include text that appeared at the top of the dashboard (just add the text at the top of your file, after the YAML). If we have multiple pages, this text will appear at the top of all pages created in the dashboard.We can move that text to a sidebar on the flexdashboard using the `{.sidebar}` option.\n\nTo add a side bar, we create a new page for the text using a level 1 header (`#`). The name used here for the header will not appear in the rendered dashboard because the `{.sidebar}` option is used. \n\n```markdown\n# Intro descrition {.sidebar}\n\nDescribe the dashboard.\n```\n\n## Components\n\nGraphs and tables are not the only options for presenting data in a dashboard. Flexdashboards also offer the option of adding various components as an alternative way to present information. Components include value boxes and gauges. We can also add links to social media sites such as Twitter, Facebook, LinkedIn (or the entire menu of these) or embed a link to the source code creating the dashboard so that others can use our work.\n\n### Value boxes\n\nValue boxes typically display single numeric values along with a title (description) and an optional icon. These are created using the `valueBox()` function in the `flexdashboard` package. The background colour of the value box is often chosen to be a meaningful colour. For example if the value is too large and out of spec, the box might be red.\n\nThe three main arguments in the `valueBox()` function are:\n\n1.\t`value` – the number or sometimes text to display in the box (possible icons are from [Font Awesome](https://fontawesome.com), [Ionicons](https://ionic.io/ionicons) and [Bootstrap Glyphicons](https://getbootstrap.com/docs/3.3/components/)).\n\n2.\t`icon` – an icon to print in the box.\n\n3.\t`color` – the background colour of the box.\n\nWhen specifying the icon argument in the `valueBox()` function, you need to use the icon’s full name plus the relevant prefix, e.g. if you are using font awesome icons, the prefix is `fa`, e.g. `\"fa-github\"`.\n\nTo create a set of two value boxes, we can use the following code and the result is in @fig-valuebox.\n\n````markdown\n---\ntitle: \"Test\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\n    vertical_layout: fill\n---\n\n```{{r setup, include=FALSE}}\nlibrary(flexdashboard)\n```\n\n## Row \n\n### Number of repository\n\n```{{r}}\nvalueBox(value = \"10\", icon = \"fa-github\")\n```\n\n### Number of pull requests\n\n```{{r}}\npr <- 25\nvalueBox(\n    value = pr, icon = \"fa-comments\",\n    color = ifelse(pr > 10, \"warning\", \"primary\")\n)\n```\n````\n\n\n::: {#fig-valuebox}\n\n![](./images/valuebox.png)\n\nDashboard with value boxes.\n\n:::\n\n\n### Gauges\n\nAnother type of component offered in flexdashboards is a gauge. A gauge displays a value on a meter as shown below. To create a gauge, simply use the `gauge()` function from the `flexdashboard` package. Like value boxes, the colours of the gauge are meaningful to the user. A gauge is created in a very similar way to a value box.\n\nThe main arguments of the `gauge()` function are:\n\n1.\t`value` – the value to display.\n\n2.\t`min` – the minimum value displayed on the gauge (usually 0).\n\n3.\t`max` – the maximum value displayed on the gauge.\n\n4.\t`sectors` – custom coloured sectors. If the value is in a particular range the gauge will be green, if the value is in another range the gauge will be orange and if the value is in the final range the gauge will be red.\n\nTo create a gauge, we can use the following code and the result is in @fig-gauge.\n\n````markdown\n---\ntitle: \"Test\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\n    vertical_layout: fill\n---\n\n```{{r setup, include=FALSE}}\nlibrary(flexdashboard)\n```\n\n## Row \n\n### Number of repository\n\n```{{r}}\nvalueBox(value = \"10\", icon = \"fa-github\")\n```\n\n### Number of pull requests\n\n```{{r}}\npr <- 30\ngauge(\n    value = pr, min = 0, max = 50,\n    sectors = gaugeSectors(\n        success = c(0, 10), warning = c(11, 25), danger = c(26, 50)\n    )\n)\n```\n````\n\n\n::: {#fig-gauge}\n\n![](./images/gauge.png)\n\nDashboard with gauges.\n\n:::\n\n### Social media and source code\n\nSocial media links can be added to the flexdashboard if we want to share our work. we can also embed a link to the source code underpinning the dashboard. Both are achieved by editing the YAML header.\n\nTo add social media links, specify the `social` option in the YAML header. There are several options to choose here including twitter, linkedin, etc. However choosing `\"menu\"` as here adds them all.  To embed a link to the source code use the `source_code` option and choose embed.\n\n```yaml\n---\ntitle: \"Test\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\n    vertical_layout: fill\n    social: \"menu\"\n    source_code: embed\n---\n```\n\nNew symbols appear in the top right corner of the dashboard. Clicking on the social media symbol displays the social media options available. Clicking on the source code link brings up this screen – all of the code used to create the dashboard. Other users can now copy this code and use it for their own dashboards.\n\n\n## Additional resources\n\n* The `flexdashboard` [website](https://pkgs.rstudio.com/flexdashboard/).\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\n[Back](/weeks/week-6.qmd) ⏎\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}