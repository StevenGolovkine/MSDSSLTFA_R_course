{
  "hash": "005fead717fe611c2dfb98345d43c99c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Transform\"\nengine: knitr\n---\n\n\n\n\n\n<br>\nAs explained in the [ETL philosohphy section](/contents/week-3/01_ETL.qmd), data transformation entails a sequence of actions aimed at readying data for analysis or incorporation into a database. These actions span various tasks such as removing duplicate entries, handling absent values, correcting data formats, performing aggregations, and crafting new attributes, among others. For these operations, we rely on packages within the tidyverse. We will not delve extensively into this aspect as it was the central theme of [Tidyverse](/weeks/week-2.qmd), but we will provide a brief overview of how to merge data frames or tibbles using `dplyr`.\n\n## Joining\n\nJoining involves combining two or more tibbles based on common columns or key variables, aligning rows with matching values. This process is crucial for merging different datasets, enabling comprehensive analyses that incorporate data from multiple sources.\n\nThere are four main join:\n\n* **Inner join**: This join only includes observations that match in both X and Y. The `dplyr` function is `inner_join()`.\n\n::: {#fig-inner-join}\n\n![](images/inner_join.svg){width=50%}\n\nA schematic view of an inner join.\n\n:::\n\n* **Left join**: This join includes all observations in X, regardless of whether they match or not with observations in Y. This is the most commonly used join because it ensures that you do not lose observations from your primary table. The `dplyr` function is `left_join()`.\n\n::: {#fig-left-join}\n\n![](images/left_join.svg){width=50%}\n\nA schematic view of a left join.\n\n:::\n\n* **Right join**: This join includes all observations in Y, regardless of whether they match or not with observations in X. It is equivalent to `left_join(Y, X)`, but the columns and rows will be ordered differently. This join is rarely used as it can be replaced by a left join. The `dplyr` function is `right_join()`.\n\n::: {#fig-right-join}\n\n![](images/right_join.svg){width=50%}\n\nA schematic view of a right join.\n\n:::\n\n* **Full join**: This join includes all observations from X and Y. The `dplyr` function is `full_join()`.\n\n::: {#fig-full-join}\n\n![](images/full_join.svg){width=50%}\n\nA schematic view of a full join.\n\n:::\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nWe will use [The One API](https://the-one-api.dev) to fetch a Lord of the Rings database. We assume that the `character`, `movie` and `quote` datasets have been loaded. The first observations of the datasets are:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(movie)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.outputcode}\n# A tibble: 6 × 8\n  `_id`           name  runtimeInMinutes budgetInMillions boxOfficeRevenueInMi…¹\n  <chr>           <chr>            <int>            <int>                  <dbl>\n1 5cd95395de30ef… The …              558              281                  2917 \n2 5cd95395de30ef… The …              462              675                  2932 \n3 5cd95395de30ef… The …              169              200                  1021 \n4 5cd95395de30ef… The …              161              217                   958.\n5 5cd95395de30ef… The …              144              250                   956 \n6 5cd95395de30ef… The …              179               94                   926 \n# ℹ abbreviated name: ¹​boxOfficeRevenueInMillions\n# ℹ 3 more variables: academyAwardNominations <int>, academyAwardWins <int>,\n#   rottenTomatoesScore <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(characters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.outputcode}\n# A tibble: 6 × 11\n  `_id`         name  wikiUrl race  gender spouse birth death hair  realm height\n  <chr>         <chr> <chr>   <chr> <chr>  <chr>  <chr> <chr> <chr> <chr> <chr> \n1 5cd99d4bde30… Adan… http:/… Human Female Belem… <NA>  <NA>  <NA>  <NA>  <NA>  \n2 5cd99d4bde30… Adra… http:/… Human Male   <NA>   Befo… Late… <NA>  <NA>  <NA>  \n3 5cd99d4bde30… Adra… http:/… Human Male   Unnam… TA 2… TA 3… <NA>  <NA>  <NA>  \n4 5cd99d4bde30… Aegn… http:/… Elf   Male   Loved… YT d… FA 4… Gold… <NA>  <NA>  \n5 5cd99d4bde30… Aerin http:/… Human Female Brodda Mid … FA 4… <NA>  <NA>  <NA>  \n6 5cd99d4bde30… Aili… http:/… Human Female Orcha… Betw… Earl… <NA>  <NA>  <NA>  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(quotes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.outputcode}\n# A tibble: 6 × 5\n  `_id`                    dialog                          movie character id   \n  <chr>                    <chr>                           <chr> <chr>     <chr>\n1 5cd96e05de30eff6ebcce7e9 Deagol!!                        5cd9… 5cd99d4b… 5cd9…\n2 5cd96e05de30eff6ebcce7ea Deagol!                         5cd9… 5cd99d4b… 5cd9…\n3 5cd96e05de30eff6ebcce7eb Deagol!                         5cd9… 5cd99d4b… 5cd9…\n4 5cd96e05de30eff6ebcce7ec Give us that! Deagol my love    5cd9… 5cd99d4b… 5cd9…\n5 5cd96e05de30eff6ebcce7ed Why?                            5cd9… 5cd99d4b… 5cd9…\n6 5cd96e05de30eff6ebcce7ee Because', it's my birthday and… 5cd9… 5cd99d4b… 5cd9…\n```\n\n\n:::\n:::\n\n\n\nWe can remark that the `quotes` dataset has one column that refers to the movie and one column that refers to the character. We however do not have access to movie and character information in this dataset, but only their id in the other tables. We will join the three datasets: a left join between `quotes` and `movie` and a full join between the resulting dataset and `characters` because we would like to keep all the characters even if they do not have any quotes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset_join <- quotes |>\n    left_join(movie, by = join_by(\"movie\" == \"_id\")) |> \n    full_join(characters, by = join_by(\"character\" == \"_id\"))\nhead(dataset_join)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{.outputcode}\n# A tibble: 6 × 22\n  `_id`    dialog movie character id    name.x runtimeInMinutes budgetInMillions\n  <chr>    <chr>  <chr> <chr>     <chr> <chr>             <int>            <int>\n1 5cd96e0… Deago… 5cd9… 5cd99d4b… 5cd9… The R…              201               94\n2 5cd96e0… Deago… 5cd9… 5cd99d4b… 5cd9… The R…              201               94\n3 5cd96e0… Deago… 5cd9… 5cd99d4b… 5cd9… The R…              201               94\n4 5cd96e0… Give … 5cd9… 5cd99d4b… 5cd9… The R…              201               94\n5 5cd96e0… Why?   5cd9… 5cd99d4b… 5cd9… The R…              201               94\n6 5cd96e0… Becau… 5cd9… 5cd99d4b… 5cd9… The R…              201               94\n# ℹ 14 more variables: boxOfficeRevenueInMillions <dbl>,\n#   academyAwardNominations <int>, academyAwardWins <int>,\n#   rottenTomatoesScore <dbl>, name.y <chr>, wikiUrl <chr>, race <chr>,\n#   gender <chr>, spouse <chr>, birth <chr>, death <chr>, hair <chr>,\n#   realm <chr>, height <chr>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Additional resources\n\n* An [article](https://dplyr.tidyverse.org/articles/two-table.html) on joining.\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\n[Back](/weeks/week-3.qmd) ⏎\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}