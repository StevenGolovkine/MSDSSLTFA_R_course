{
  "hash": "a29acc1b6434a1b346f0495d8711759c",
  "result": {
    "markdown": "---\ntitle: \"Automation and Scheduling\"\nengine: knitr\n---\n\n\n<br>\nAutomation and scheduling involves the systematic execution of data workflows at specified intervals or under predefined conditions. This ensures that data tasks are performed consistently, reducing manual effort and minimizing the risk of errors. Automation simplifies repetitive data extraction, transformation, and loading steps, while scheduling allows these processes to run automatically at specific times, e.g., every week. By automating and scheduling their processes, organizations can streamline data operations and maintain data integrity.\n\nWe will dive into the Automation process during [Week 5](../../weeks/week-5.qmd) and focus on the Scheduling process here.\n\n## Scheduling\n\nScheduling is a systematic process that involves planning and organizing tasks to occur at specific times or under predetermined conditions. The primary objective of scheduling is to ensure that tasks are executed efficiently. Schedules are typically created based on factors such as task dependencies, deadlines, available resources, and priorities. For example, imaging a dataset that is updated daily (as weather data), scheduling can be used to retrieve these data automatically.\n\nIn R, we use the package `cronR`, on Unix systems, and the package `taskscheduleR`, on Windows systems, to schedule jobs. The two packages work the same, so we will just focus on the `cronR` package.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nAs always, the first is to load the package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cronR)\n```\n:::\n\n\nWe then need to define the command to be scheduled. To do so, we use the `cron_rscript` function. We can pass the arguments of the script directly to the function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- system.file(\"r_script.R\")  # get the path of the file\ncmd <- cron_rscript(f, rscript_args = c(\"args1\", \"args2\"))\n```\n:::\n\n\nTo run the script every hour, we run:\n\n::: {.cell}\n\n```{.r .cell-code}\ncron_add(cmd, frequency = 'hourly', id = 'job1')\n```\n:::\n\n\nTo run the script every Sunday at 8:00am, we run:\n\n::: {.cell}\n\n```{.r .cell-code}\ncron_add(cmd, frequency = 'daily', at = '08:20', days_of_week = 0)\n```\n:::\n\n\nTo run the script every starting day of the month at 2:00pm, we run:\n\n::: {.cell}\n\n```{.r .cell-code}\ncron_add(\n    cmd, frequency = 'monthly', at = '14:00',\n    days_of_month = 'first', days_of_week = '*'\n)\n```\n:::\n\n\nTo list all the scheduled jobs, we run:\n\n::: {.cell}\n\n```{.r .cell-code}\ncron_ls()\n```\n:::\n\n\nFinally, to remove all the scheduled jobs, we run:\n\n::: {.cell}\n\n```{.r .cell-code}\ncron_clear(ask = FALSE)\n```\n:::\n\n\n:::\n\n## Additional resources\n\n* [Website](https://crontab.guru) to define cron schedule expressions.\n\n* The [`cronR`](https://cran.r-project.org/web/packages/cronR/index.html) package.\n\n* The [`taskscheduleR`](https://cran.r-project.org/web/packages/taskscheduleR/index.html) package.\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 03](/weeks/week-3.qmd) ‚èé\n:::",
    "supporting": [
      "05_automation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}