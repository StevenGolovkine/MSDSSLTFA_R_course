{
  "hash": "1f983f90a326823edef5fca17c987aa9",
  "result": {
    "markdown": "---\ntitle: \"Armadillo\"\nengine: knitr\n---\n\n\n<br>\nArmadillo is a linear algebra library for the C++ language. The `RcppArmadillo` package provides an interface from R to and from Armadillo by utilising the `Rcpp` package.\n\nWe need to add these lines in the header of the `.cpp` file.\n```c\n#include <RcppArmadillo.h>\n// [[Rcpp::depends(RcppArmadillo)]]\nusing namespace Rcpp;\nusing namespace arma;\n```\n\n## Armadillo implementation\n\nThe functions from `RcppArmadillo` are similar to R code, and we can write C++ code (almost) like we would write R code. The documentation (with all the functions) is available [here](https://arma.sourceforge.net/docs.html#misc_fns). All of the common linear algebra related functions are already implemented.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nIn this example, we create a matrix and perform some common manipulation using R and `RcppArmadillo`.\n\n```r\nX = matrix(rnorm(100), nrow = 10, ncol = 10)  # Create a matrix\nX[1, 1]  # Slicing\nnrow(X)  # Get the number of rows\nt(X)  # Transpose the matrix\n```\n\n```c\nmat X = mat(10, 10, arma::fill::randn);  // Create a matrix\nX(0, 0)  // Slicing\nX.n_rows  // Get the number of rows\nX.t()  // Transpose the matrix\n```\n\nRemember that, in C++, indexing starts at 0.\n\n:::\n\nSome statictics functions are also available. We can compute histograms, PCA or generate random vectors using `RcppArmadillo`.\n\n::: {.callout-note appearance=\"simple\"}\n\n## Example\n\nWe create a matrix with random entries (with a Normal distribution), compute the principal components and perform a k-means clustering \n\n```c\nmat X(100, 5, fill::randu);  // Matrix with Gaussian distribution\n\nmat coeff, score;  // Create placeholders\nvec latent, tsquared;  // Create placeholders\nprincomp(coeff, score, latent, tsquared, X);  // Perforn PCA\n\nmat means;  // Create placeholders\nbool status = kmeans(means, X, 2, random_subset, 10, true);  // KMeans\n```\n\n:::\n\nWe can alternatively use the `RcppEigen` package, that uses the C++ `Eigen` library as a backend for linear algebra tasks. Both packages offer comparable features, making the choice between them a matter of personal preference.\n\n## Additional resources\n\n* Armadillo [documentation](https://arma.sourceforge.net).\n\n* `RcppArmadillo` package [documentation](https://cran.r-project.org/web/packages/RcppArmadillo/index.html).\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 10](/weeks/week-10.qmd) ‚èé\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}