{
  "hash": "dd03791ea103e2b6a5eb472f942efe97",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Debugging and profiling - Tutorial\"\nengine: knitr\n---\n\n\n\n<br>\nThe aim of the tutorial is to find and fix bugs in R functions and do some profiling of common R functions to see if some optimisation is feasible.\n\n\nFor the following code snippets, find and fix the bugs using `browser()` and `debug()`. It may have multiple bugs in each snippets. In a second step, do the profiling of the snippets using `profvis` and `bench`. You can try the functions with different inputs and try to understand if they can be optimised in some way.\n\n\n1. In this function, we want to compute $n!$ for $n \\in \\mathbb{N}$. For the purpose of the exercise, do not use the built-in `factorial` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_factorial <- function(n) {\n    result <- 1\n    for (i in 1:n) {\n        result <- c(result, result * i)\n    }\n    return(result[length(result)])\n}\n\ncalc_factorial(10)\ncalc_factorial(100)\ncalc_factorial(0)\ncalc_factorial(-5)\n```\n:::\n\n\n\n2. Here, we would like to determine if $n$ is prime.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_prime <- function(n) {\n  if (n <= 1) {\n    return(FALSE)\n  }\n  if (n %% 2 == 0 || n %% 3 == 0) {\n    return(FALSE)\n  }\n  i <- 5\n  while (i <= n) {\n    if (n %% i == 0 || n %% (i + 2) == 0) {\n      return(FALSE)\n    }\n    i <- i + 1\n  }\n  return(TRUE)\n}\n\nis_prime(10)\nis_prime(13)\nis_prime(1147851)\nis_prime(200560490131)\n```\n:::\n\n\n\n3. Using a list of names, with associated ages, find the age associated to the name.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_age <- function(name) {\n    for (i in 1:length(names)) {\n        if (names[i] == name) {\n            return(ages[i])\n        }\n    }\n    return(\"Name not found\")\n}\n\nnames <- c(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\")\nages <- c(25, 32, 28, 45, 30)\nfind_age(\"Charlie\", names, ages)\n\nset.seed(42)\nnames <- replicate(\n    1e6, paste(sample(LETTERS, size = 3, replace = TRUE), collapse = \"\")\n)\nages <- sample(20:95, 1e6, replace = TRUE)\nfind_age(\"WOZ\", names, ages)\n```\n:::\n\n\n\n4. In a dataframe, we would like to retrieve get all the value larger than $1$ for a specific column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_data <- function(dataset) {\n    v <- c()\n    for (idx in 1:nrow(dataset)) {\n        if(dataset[idx,]$value > 1) {\n            v <- c(v, dataset[idx,]$value)\n        }\n    }\n    return(v)\n}\n\ndf <- data.frame(id = 1:1e2, value = rnorm(1e2))\nv <- subset_data(df)\n\ndf <- data.frame(id = 1:1e6, value = rnorm(1e6))\nv <- subset_data(df)\n```\n:::\n\n\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\n[Back](/weeks/week-9.qmd) ‚èé\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}