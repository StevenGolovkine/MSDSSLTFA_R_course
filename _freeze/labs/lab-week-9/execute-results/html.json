{
  "hash": "0bb5a897f295be684530c5265f578a49",
  "result": {
    "markdown": "---\ntitle: \"Debugging and profiling - Tutorial\"\nengine: knitr\n---\n\n\n<br>\nThe aim of today's tutorial is to find and fix bugs in R functions and do some profiling of common R functions to see if some optimisation is feasible.\n\n\nFor the following code snippets, find and fix the bugs using `browser()` and `debug()`. It may have multiple bugs in each snippets. In a second step, do the profiling of the snippets using `profvis` and `bench`. You can try the functions with different inputs and try to understand if they can optimised in some way.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_factorial <- function(n) {\n    result <- 0\n    for (i in 1:n) {\n        result <- c(result, result * i)\n    }\n    return(result[length(result)])\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_prime <- function(n) {\n  if (n <= 1) {\n    return(FALSE)\n  }\n  if (n %% 2 == 0 || n %% 3 == 0) {\n    return(FALSE)\n  }\n  i <- 5\n  while (i * i <= n) {\n    if (n %% i == 0 || n %% (i + 2) == 0) {\n      return(FALSE)\n    }\n    i <- i + 4\n  }\n  return(TRUE)\n}\n\nsum_primes <- function(limit) {\n  if (limit < 2) {\n    return(0)\n  }\n  primes <- c(2)\n  sum <- 2\n\n  for (i in 3:limit) {\n    if (is_prime(i)) {\n      primes <- c(primes, i)\n      sum <- sum + i\n    }\n  }\n  \n  return(list(\"primes\" = primes, \"sum\" = sum))\n}\n```\n:::\n\n\n\n<br><br>\n\n::: {style=\"font-size: 0.875em;\"}\nBack to [week 09](/weeks/week-9.qmd) ‚èé\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}