---
title: "Debugging and profiling - Tutorial"
engine: knitr
---

<br>
The aim of the tutorial is to find and fix bugs in R functions and do some profiling of common R functions to see if some optimisation is feasible.


For the following code snippets, find and fix the bugs using `browser()` and `debug()`. It may have multiple bugs in each snippets. In a second step, do the profiling of the snippets using `profvis` and `bench`. You can try the functions with different inputs and try to understand if they can be optimised in some way.


1. In this function, we want to compute $n!$ for $n \in \mathbb{N}$. For the purpose of the exercise, do not use the built-in `factorial` function.

```{r}
#| eval: false
calc_factorial <- function(n) {
    result <- 1
    for (i in 1:n) {
        result <- c(result, result * i)
    }
    return(result[length(result)])
}

calc_factorial(10)
calc_factorial(100)
calc_factorial(0)
calc_factorial(-5)
```

2. Here, we would like to determine if $n$ is prime.

```{r}
#| eval: false
is_prime <- function(n) {
  if (n <= 1) {
    return(FALSE)
  }
  if (n %% 2 == 0 || n %% 3 == 0) {
    return(FALSE)
  }
  i <- 5
  while (i <= n) {
    if (n %% i == 0 || n %% (i + 2) == 0) {
      return(FALSE)
    }
    i <- i + 1
  }
  return(TRUE)
}

is_prime(10)
is_prime(13)
is_prime(1147851)
is_prime(200560490131)
```

3. Using a list of names, with associated ages, find the age associated to the name.

```{r}
#| eval: false
find_age <- function(name) {
    for (i in 1:length(names)) {
        if (names[i] == name) {
            return(ages[i])
        }
    }
    return("Name not found")
}

names <- c("Alice", "Bob", "Charlie", "David", "Eve")
ages <- c(25, 32, 28, 45, 30)
find_age("Charlie", names, ages)

set.seed(42)
names <- replicate(
    1e6, paste(sample(LETTERS, size = 3, replace = TRUE), collapse = "")
)
ages <- sample(20:95, 1e6, replace = TRUE)
find_age("WOZ", names, ages)
```

4. In a dataframe, we would like to retrieve get all the value larger than $1$ for a specific column.

```{r}
#| eval: false
subset_data <- function(dataset) {
    v <- c()
    for (idx in 1:nrow(dataset)) {
        if(dataset[idx,]$value > 1) {
            v <- c(v, dataset[idx,]$value)
        }
    }
    return(v)
}

df <- data.frame(id = 1:1e2, value = rnorm(1e2))
v <- subset_data(df)

df <- data.frame(id = 1:1e6, value = rnorm(1e6))
v <- subset_data(df)
```

<br><br>

::: {style="font-size: 0.875em;"}
[Back](/weeks/week-9.qmd) ‚èé
:::