---
title: "C++ - Tutorial"
engine: knitr
---

<br>
The aim of today's tutorial is to write the C++ version of the `lm()` function. We will compare the implementation of `lm()`, our own implementation of a linear model in R and our implementation of a linear model in C++.

## Maths

Recall from linear regression. Let 
$$Y_i = \beta_0 + \beta_1x_i + \epsilon_i, \quad i = 1, \dots, n,$$
where the $x_i$'s are fixed and the $\epsilon_i$'s are i.i.d. with law $\mathcal{N}(0, \sigma^2)$. We want to test
$$(H_0): \beta_1 = 0 \quad\text{vs}\quad (H_1): \beta_1 \neq 0.$$

We can use the Student test statistic: $T = \widehat{\beta}_1 / \widehat{\sigma}_{\widehat{\beta}_1}$, with
$$\widehat{\beta}_1 = \frac{\overline{xy} - \overline{x}\cdot\overline{y}}{\overline{x^2} - \overline{x}^2}, \quad \widehat{\beta}_0 = \overline{y} - \widehat{\beta}_1\overline{x}, \quad \widehat{\sigma}_{\widehat{\beta}_1} = \frac{\widehat{\sigma}}{\sqrt{n\left(\overline{x^2} - \overline{x}^2\right)}},$$
and
$$\widehat{\sigma} = \sqrt{\frac{n}{n - 2}\left(\overline{y^2} + \widehat{\beta}_0^2 \widehat{\beta}_1^2\overline{x^2} - 2\widehat{\beta}_0\overline{y} - 2\widehat{\beta}_1\overline{xy} + 2\widehat{\beta}_0\widehat{\beta}_1\overline{x}\right)}.$$

We know that if $\epsilon \sim \mathcal{N}(0, \sigma^2)$, then $T \sim t(n - 2)$ under the null hypothesis. The test procedure is then to reject $(H_0)$ if 
$$\lvert t_{obs} \rvert > t_{1 - \alpha/2}^{n - 2},$$
the $(1 - \alpha/2)$-quantile of a $t(n - 2)$ distribution. To this procedure, we associate a risk (of the first kind) defined by 
$$\mathbb{P}(\text{decide } (H_1) \mid (H_1) \text{ is false}) = \alpha.$$

This procedure is correct if $\epsilon \sim \mathcal{N}(0, \sigma^2)$. What happened if the noise has another distribution, e.g. $\mathcal{U}(0, 1)$? Well, it can be difficult to give a (non asymptotic) mathemetical answer to this question. But we can use a Monte Carlo simulation.

Recall the Monte Carlo procedure. Consider $n$ fixed values $x_1, dots, x_n$. Fix also arbitrarily $\beta_0 = 3$ and $\beta_1 = 0$, so that $(H_1)$ is false.

For $m = 1, \dots, M$ (e.g. $M = 10^5$):

1. Generate the $y_i$'s from the true model $y_i = \beta_0 + \epsilon_i, i = 1, \dots, n$, where $\epsilon_i \sim \mathcal{U}(0, 1)$ i.i.d.

2. Fit the postulated model $y_i = \beta_0 + \beta_1x_i + \epsilon_i$, i.e. compute the least square esitmators $\widehat{\beta}_1$ and $\widehat{\sigma}_{\widehat{\beta}_1}$ based on the data $(x_i, y_i), i = 1, \dots, n$ obtained at the first step.

3. Compute the test statistic $t_{obs}^{(m)}$.

4. Take the decision to accept $(H_1)$ if $\lvert t_{obs}^{(m)} \rvert > t_{1 - \alpha/2}^{n - 2}$.

We then count, among $M$, the number $d$ of times where $(H_1)$ has been accepted (wronly since $(H_1)$ is false). We then have
$$\mathbb{P}(\text{decide } (H_1) \mid (H_1) \text{ is false}) \approx \frac{d}{M}.$$
It will then be possible to compare this ratio to $\alpha$ in order to see if we under- or over-estimate the risk.

## Implementation

1. Create an R function to perform a linear regression with:

**Input**: Two arguments

- `x`: vector
- `y`: vector

**Output**: A named list, with 9 components

- `xbar`: numeric, $\overline{x}$
- `ybar`: numeric, $\overline{y}$
- `x2bar`: numeric, $\overline{x^2}$
- `y2bar`: numeric, $\overline{y^2}$
- `xybar`: numeric, $\overline{xy}$
- `beta0hat`: numeric, $\widehat{\beta}_0$
- `beta1hat`: numeric, $\widehat{\beta}_1$
- `sigmahat`: numeric, $\widehat{\sigma}$
- `sigbeta1hat`: numeric, $\widehat{\sigma}_{\widehat{\beta}_1}$

2. Create an R function to perform the Monte Carlo procedure. This function should call the function you previously write.

**Input**:

- `x`: vector of the $x_i$'s of length $n$.
- `M`: integer with default value $10^5$.
- `beta0`: numeric whose default value is $3$.
- `alpha`: numeric whose default value is $0.05$.
- `rand`: function to generate random numbers, whose default is `runif`.

**Output**:

- $d / M$: numeric

3. Write a function to perform a linear regression in C++.

4. Write a function to perform the Monte Carlo procedure in C++.

4. Compare the computation time of the Monte Carlo procedure using `lm()`, your implementation of a linear model with and without C++.
