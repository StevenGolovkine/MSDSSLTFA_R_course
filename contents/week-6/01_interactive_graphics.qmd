---
title: "Interactive graphics with plotly"
engine: knitr
---

<br>
Interactive graphics enable users to explore data and gain insights more dynamically. This interactivity includes zooming, panning, hovering over data points for additional information, and selecting specific elements for deeper exploration. Nowadays, there are numerous R packages to create interactive plots. Here, we will focus on `plotly` as it is a general purposes data visualisation package and it works nicely with `ggplot2`.

Before you start, you will need to download and install the `plotly` package. We will also need the `tidyverse`.

```{r}
#| eval: false
#| class-output: outputcode
install.packages('plotly')
```

```{r}
#| eval: true
#| warning: false
#| class-output: outputcode
library(tidyverse)
library(plotly)
```

For this section, we will use a dataset gathering information on US States ([link](https://github.com/rfordatascience/tidytuesday/tree/master/data/2023/2023-08-01)). The dataset is assumed to be loaded using:

```{r}
#| class-output: outputcode
#| eval: true
#| warning: false
df <- read_csv('./source/states.csv')
head(df)
```

## Getting started

The plotting philosophy of `plotly` is similar to the one of `ggplot2` in the sense that the plot is created by adding **layers** of information. The plots created with `plotly` are highly customisable.

The figures are created using the `plot_ly()` function and the layout can be modified using the `layout()` function. If we assign variable names (e.g. `state`, `population_2020`, etc) to visual properties (e.g. `x`, `y`, `color`, etc), `plot_ly()` will try to create a sensible plot based on the information we provide. The behaviour can be changed by setting the `type` parameters.

::: {.callout-note appearance="simple"}

Note that to assign a variable name to a visual property, we have to use the `~` symbol. For example, `x = ~population` or `color = ~n_representatives`.

:::

::: {.callout-note appearance="simple"}

## Example

A pretty complete example to create a scatter plot in `plotly`. 

```{r}
#| class-output: outputcode
#| eval: true
#| warning: false
plot_ly(
    data = df,
    type = 'scatter',
    mode = 'markers',
    x = ~population_2020,
    y = ~total_area_mi2,
    text = ~paste(
        'Population:', population_2020,
        '\nTotal area in mi^2:', total_area_mi2,
        '\nNumber of representative:', n_representatives
    ),
    marker = list(
        color = ~n_representatives, 
        colorbar = list(
            title = "Number of representatives",
            orientation = 'h'
        ),
        colorscale = 'Viridis',
        showscale = TRUE
    )
) |> 
    layout(
        title = 'Population vs Total Area of American States (in 2020)',
        xaxis = list(title = 'Population'),
        yaxis = list(title = "Total area in miles squared")
    )
```

:::



## Make a ggplot interactive

Making a `ggplot` interactive is very easy. The package `plotly` provides the function `ggplotly()` that does all the job. The function takes a `ggplot` object as input and return a `plotly` object. As it returns a `plotly` object, we can use all the formatting elements on it.

::: {.callout-note appearance="simple"}

## Example

We can create a simple plot using `ggplot2`:
```{r}
#| class-output: outputcode
#| eval: true
#| warning: false
gg <- ggplot(df) +
    geom_point(
        aes(x = population_2020, y = total_area_mi2, text = state)
    ) +
    xlab('Population in 2020') +
    ylab('Total area in square miles') +
    theme_bw()
gg
```

And then, make it interactive using the `ggplotly()` function.

```{r}
#| class-output: outputcode
#| eval: true
#| warning: false
ggplotly(gg, tooltip = 'text')
```
:::


## Configuration



## Additional resources

* Plotly R [documentation](https://plotly.com/r/).

* Plotly with `ggplot2` [documentation](https://plotly.com/ggplot2/).

* Interactive web-based data visualization with R, plotly and shiny [book](https://plotly-r.com).

<br><br>

::: {style="font-size: 0.875em;"}
Back to [week 06](/weeks/week-6.qmd) ‚èé
:::