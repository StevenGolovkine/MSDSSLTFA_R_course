---
title: "Interactive web apps with Shiny"
engine: knitr
---

<br>
A web app created using the `shiny` package is an interactive, browser-based application that allows users to engage with and explore data through a graphical user interface. Shiny simplifies the process of developing web applications by providing a framework for creating dynamic and responsive interfaces.

## Getting started

Shiny is a framework for creating interactive web applications using R. It has been developed to creat quite complex apps but without in-depth knowledge of traditional web development languages such as HTML, CSS or JavaScript. However, this does not limit users to prefabricated or trivial apps. Shiny is flexible enough to allow users to extend the basic functionality and add more complex components should they choose to.

Shiny is designed to feel easy when you are starting out creating apps. As we learn more and dig into how it works, the general building blocks and the software engineering principals behind them become more apparent.

Nowadays, Shiny is used everywhere including academia as a teaching tool to inspire students when teaching statistical concepts, and across a wide range of industries including pharma, manufacturing, finance, among a few. One example mention in the Mastering Shiny book is that Silicon Valley tech companies used Shiny to set up realtime metrics dashboards that incorporate advanced analytics.

A nice feature of Shiny is that we do not need to learn all about Shiny components before using it. We can embed Shiny components into an R Markdown (or Quarto) file. This will create an interactive report or slideshow. Embedding Shiny into an R Markdown (or Quarto) file is the easiest (and quickest) way to build simple Shiny apps.

Flexdashboards are written using R Markdown, therefore we can also embed Shiny components easily into the dashboard. We can add these components to the dashboard with minimal knowledge of Shiny itself. Adding Shiny components will allow flexdashboards to have reactive sections and will build interactivity for the user.

Making an R Markdown (or Quarto) file interactive requires two steps:

1. Change the YAML header to include the `runtime: shiny` option to the R Markdown file or the `server: shiny` option to the Quarto file.

2. Save the file, it will replace the **Knit** button with the **Run Document** button.

Clicking on the **Run Document** button will render the file as a Shiny app. The app will continue running (notice there is a stop symbol 🛑 in the **Render** tab in R Studio) until you click the **Stop** button. If we make any changes to the app, we need to click the **Run document** button again for the changes to be visible.

## Widgets

Widgets are web elements that the user can interact with. A widget collects a value from the user, if the user changes the value, the collected value will change as well. 

There are many Shiny widgets available (see [here](https://shiny.posit.co/r/gallery/widgets/widget-gallery/) for a complete list). We can create our own widgets using the `shinyWidgets` package. Here, we will focus on two of these:

* the `selectInput()` widget which provides a dropdown list of options to choose from;

* the `sliderInput()` widget which provides a slider of (numeric) options to choose from.

### The `selectInput()` widget

The `selectInput()` function is used to create a select list input control. The code to create this widget is given here:

```r
selectInput(
    inputId = "n_bins", label = "Number of bins:",
    choices = c(10, 20, 35, 50), selected = 20
)
```

The `selectInput()` function has four primary arguments:

* `inputId = "n_bins"` is the name of the input that we need to  specify. We will use this name in the render function to access to the selected value.

* `label = "Number of bins:"` is the title on the widget.

* `choices = c(10, 20, 35, 50)` lists the choices to select from.

* `selected = 20` is the default value selected.


::: {#fig-selectinput}

![](./images/selectinput.png)

Example of `selectInput()`.

:::

::: {.callout-note appearance="simple"}

Be careful that the value returned by a `selectInput()` widget is a character. To work with numbers, it has to be converted.

:::

### The `sliderInput()` widget

The `sliderInput()` widget is used to create a slider widget that allows users to select a number, date or date from a range. The code to create this widget is given here:

```r
sliderInput(
    inputId = "n_bins", label = "Number of bins:", 
    min = 1, max = 50, value = 30
)
```

The `sliderInput()` function has five primary arguments:

* `inputId = "n_bins"` is the name of the input that we need to specify. We will use this name in the render function to access the value selected.

* `label = "Number of bins"` is the title on the widget.

* `min = 1` and `max = 50` set the minimum and maximum values on the slider.

* `value = 30` sets the default value to 30.

By default, the stepsize between two consecutive values in the slider is determined using the minimum and maximum value. To change this behaviour, we use the `step` arguments. For exmaple, setting `step = 5` will add 5 between two consecutive values.

::: {#fig-sliderInput}

![](./images/sliderinput.png)

Example of `sliderInput()`.

:::

### Adding widgets to a dashboard

It is straightforwards to add these to a `Flexdashboard`. Widgets are usually added to the sidebar of a dashboard. This requires specifying the R code chunk(s) underneath the level 1 header (`#`) containing the information printed in the sidebar.

````markdown
# Sidebar {.sidebar}

```{{r echo = FALSE}}
selectInput(
    inputId = "n_bins", label = "Number of bins:",
    choices = c(10, 20, 35, 50), selected = 20
)

sliderInput(
    inputId = "n_bins", label = "Number of bins:", 
    min = 1, max = 50, value = 30
)
```

````

At this point the widgets we created do nothing. They need to be linked to a render function to create the associated output. This could be a plot, or related to the value boxes or gauges.

## Render functions

To add reactive output to your document, you must call a render function in an R code chunk in the Markdown file. There are many render functions that can be used. These include:

* `renderImage`: images (saved as a link to a source file);
* `renderPlot`:	plots;
* `renderPrint`: any printed output;
* `renderTable`: data frame, matrix, other table like structures;
* `renderText`:	character strings;
* `renderUI`: a Shiny tag object or HTML.

Here, we will focus on the `renderPlot()` function. This render function will take the value from a widget and use it to create a plot.

To create a histogram of the waiting time from the `faithful` dataset using the value selected in the **Number of bins** widget, we can use:

```r
renderPlot({
   x <- faithful[, 2]  # Old Faithful Geyser data
   bins <- seq(min(x), max(x), length.out = input$n_bins + 1)
   hist(x, breaks = bins, col = 'darkgray', border = 'white',
        xlab = 'Waiting time to next eruption (in mins)',
        main = 'Histogram of waiting times')
})
```

The number of bins in the histogram will change as the widget change. In the widget, we have `labelId = "n_bins"`, we then use this label id in the render function to use the input value (`input$n_bins`).


::: {.callout-note appearance="simple"}
The `renderPlot()` function directly works in an R Markdown document. If you are Quarto, some changes will be necessary. We will need a particular code chunk that behave the server side, and use the `plotOutput()` function on the UI side (like a normal Shiny app).

````markdown
```{{r}}
sliderInput(
    inputId = "n_bins", label = "Number of bins:", 
    min = 1, max = 50, value = 30, step = 5
)
plotOutput("distPlot")
```

```{{r}}
#| context: server
output$distPlot <- renderPlot({
   x <- faithful[, 2]  # Old Faithful Geyser data
   bins <- seq(min(x), max(x), length.out = input$n_bins + 1)
   hist(x, breaks = bins, col = 'darkgray', border = 'white',
        xlab = 'Waiting time to next eruption (in mins)',
        main = 'Histogram of waiting times')
})
```

````
:::

We embed this into a flexdashboard as any other plots, i.e. under a level 3 header (`###`).

## A complete app

Integrating `shiny` components into a `flexdashboard` offers a straightforward approach, but it is not the most versatile method for building an interactive web app. In order to have control over each element of the app, we will need to create a complete app.

To create a new app, in RStudio, we could go to *New File > Shiny Wep App...*. In the pop-up window (@fig-shiny-app), put a name, make sure that *Multiple File* is clicked, choose a folder and click on *Create*. This will create a new folder with the files *ui.R* and *server.R*. By default, these files are populated with some code. Click *Run App* to render the application.

::: {#fig-shiny-app}

![](./images/shiny.png)

Creation of a shiny app.

:::

::: {.callout-note appearance="simple"}

Creating a complete app within a single file is possible, but it is considered good practice to use separate files for distinct purposes. For more complex apps, this approach also  simplifies navigation and organisation.

:::

The `ui.R` file will contain all user interface objects, the different panels, the widgets, the outputs, etc. This file controls the layout and the appearance of the web app. The `server.R` will contain the computation part (mostly render functions). It corresponds to the instructions that the computer needs to build the app. 

For more information on building web app with Shiny, you can refer to the book [*Mastering Shiny*](https://mastering-shiny.org/index.html).

## Publishing

You can publish your Shiny App to [shinyapps.io](https://www.shinyapps.io/), R Markdown document to [RPubs](https://rpubs.com/) and Quarto document to [QuartoPubs](https://quartopub.com).

Whichever you choose, you will need to create an account and then link it to RStudio. You can then share a link to the published app for others to use. To publish your app, click on the **Publish** button at the top of the **Viewer** pane in RStudio.

You can also look at [Github Pages](https://pages.github.com) and [Netlify](https://www.netlify.com) for more general publishing platform.

## Additional resources

* The book [Mastering Shiny](https://mastering-shiny.org/).

* Shiny [cheat sheet](https://rstudio.github.io/cheatsheets/shiny.pdf).

* Widgets [list](https://shiny.posit.co/r/gallery/widgets/widget-gallery/).

* [shinyapps.io](https://www.shinyapps.io) and [RPubs](https://rpubs.com).

<br><br>

::: {style="font-size: 0.875em;"}
Back to [week 06](/weeks/week-6.qmd) ⏎
:::
