---
title: "Tidyverse philosophy"
engine: knitr
---

<br>
The `tidyverse` is a collection of R packages that are used throughout the data analytics pipeline. These packages are designed to work together easily for data import, data manipulation, data exploration and data visualisation.

## Installing the tidyverse package

When you download and install the `tidyverse` package, you download all of the associated packages. Similiarly when you load the `tidyverse` package, you load (attach) all of the associated packages!

```{r}
#| class-output: outputcode
#| eval: true
library(tidyverse)
```

## Tidy data

The `tidyverse` packages share the same design philosophy, grammar and data structures. When using these packages, the data are assumed to be in **tidy** format, i.e. are **tidy data** (see [here](http://www.jstatsoft.org/v59/i10/paper) for a paper discussing the merits of tidy data). Tidy data are much easier to work with and you can spend more time answering the data analytic question of interest. Tidy data have a rectangular format (rows and columns) and display 3 key properties:

1. Each variable has its own column.

2. Each observation has its own row.

3. Each value has its own cell.

**Tidying** your data to ensure it is in the above format is a vital first step in preparing it for analysis. All the tables are from the `tidyr` package.

::: {.callout-note appearance="simple"}

## Example

To demonstrate, let's look at several different ways of storing data:

```{r}
#| class-output: outputcode
#| eval: true
table1
```

This table has a row for each country and year, with a separate column for cases and population. In the second table, case and population numbers are in the column *count* and a column *type* distinguishes between them.

```{r}
#| class-output: outputcode
#| eval: true
table2
```

This doubles the number of rows in the data frame! Finally, in the third table, this example has the case number and population combined into a single *rate* column.

```{r}
#| class-output: outputcode
#| eval: true
table3
```

`table1` is the tidy data version as it has one variable per column.

:::

## A tidy dataframe: `tibble`

Putting data into tidy format provides a consistent framework for using the `tidyverse` suite of packages. By default, these packages use **tibbles** to store the data in tidy format, rather than data frames. Tibbles *are* data frames but have some additional properties that make them easier to work with. You can learn more about tibbles if you wish by typing:

```{r}
#| class-output: outputcode
#| eval: false
vignette("tibble")
```
into the R console.
    
### Creating a tibble

To create a tibble use the `tibble()` function in place of the `data.frame()` function. We saw how to create a data frame using:

```{r}
#| class-output: outputcode
#| eval: true
my_data_frame <- data.frame(
    year = c(1980, 1988, 1996, 1998, 2000, 2002, 1985, 2005),
    gender = c("M", "M", "F", "F", "M", "F", "M", "M"),
    wgt = c(71.5, 72.1, 73.7, 74.3, 75.2, 74.7, 89.6, 95.2)
)
```
    
Let's re-create this using the `tibble()` function:
```{r}
#| class-output: outputcode
#| eval: true
my_tibble <- tibble(
    year = c(1980, 1988, 1996, 1998, 2000, 2002, 1985, 2005),
    gender = c("M", "M", "F", "F", "M", "F", "M", "M"),
    wgt = c(71.5, 72.1, 73.7, 74.3, 75.2, 74.7, 89.6, 95.2)
)
```

### Comparing tibbles and data frames

`tibble` provides better printing capabilities than `data.frame`. By default, `tibble` prints the number of observations and columns of the data frame, as well as the type of the columns.

::: {.callout-note appearance="simple"}

## Example

```{r}
#| class-output: outputcode
#| eval: true
head(my_data_frame)
head(my_tibble)
```

:::

::: {.callout-note appearance="simple"}

## Example

The output of the `str()` function is roughly the same for both classes:
```{r}
#| class-output: outputcode
#| eval: true
str(my_data_frame)
str(my_tibble)
```

:::

::: {.callout-note appearance="simple"}

## Example

Looking at the intrinsic attributes (`mode` and `length`, remember), the results are the same for `tibble` and `dataframe`.

```{r}
#| class-output: outputcode
#| eval: true
mode(my_data_frame)
mode(my_tibble)
```

```{r}
#| class-output: outputcode
#| eval: true
length(my_data_frame)
length(my_tibble)
```

:::

So, really, a `tibble` **IS** a dataframe. But the reverse is not true.

### Subsetting 

You can use the same subsetting rules for tibbles as for data frames, however the format of the output may differ.

::: {.callout-note appearance="simple"}

## Example

To extract the `year` data using the `$` notation:

```{r}
#| class-output: outputcode
#| eval: true
my_data_frame$year
my_tibble$year
```

But extracting the `year` data using `[ ]` gives different outputs:

```{r}
#| class-output: outputcode
#| eval: true
my_data_frame[,"year"]  # returns a vector
my_tibble[,"year"]  # returns a tibble
```

To match the output we can use `[[ ]]`:

```{r}
#| class-output: outputcode
#| eval: true
my_data_frame[["year"]]
my_tibble[["year"]]
```

:::

Remember, this works because a tibble/data frame is stored as a list! In contrast to a `data.frame`, tibbles adhere to a stricter structure. They completely avoid partial matching and, in cases where you attempt to access a non-existent column, they will raise a warning.

## Additional resources

* The tidyverse [website](https://www.tidyverse.org).

* The tibble [website](https://tibble.tidyverse.org/index.html).

<br><br>

::: {style="font-size: 0.875em;"}
[Back](/weeks/week-2.qmd) ‚èé
:::