---
title: "Data reading and storing with readr and tibble"
engine: knitr
---

```{r}
#| class-output: outputcode
#| eval: true
#| include: false
library(tidyverse)
```

<br>
In most data analytics projects, the first step is to load data into R from an external file.  The `readr` package is part of the `tidyverse` and was created to read in large, flat data files (e.g. csv, text) to R. The package is built on similar base R functions but has made them much more efficient. It also interacts consistently with other `tidyverse` packages. Data are stored as `tibble`.

## readr functions

There are several `readr` functions to choose from. These are:
    
* **read_csv()** - reads comma delimited files.
* **read_tsv()** - reads tab delimited files.
* **read_delim()** - reads in files with any delimiter.
* **read_table()** - reads in fixed width files where columns are separated by white space.

The function used will depend on the type of file that is being read into R, but it will concern tabular data.

## How to use `read_csv()`?

A typical call to `read_csv()` has the form:
```{r}
#| class-output: outputcode
#| eval: false
df <- read_csv(
    file = 'filepath/filename.csv',
    col_names = TRUE
)
```

The `file` argument is used to specify the file location (filepath), and the name of the file being read in (filename.csv). The function returns a tibble which can be stored with a name of your choice.

The `col_names` argument of the `read_csv()` function can be `TRUE` or `FALSE` or a character vector of column names. If `TRUE` (the default) the first row of input in the csv file will be used as the column names. If `FALSE` column names will be generated automatically (`X1`, `X2`, etc.). If a character vector, these will be used as the column names. By default, `read_csv()` reads in a csv file line-by-line. It will also read in the first few rows of the data and try to figure out the data type/class of each column. Sometimes it can make mistakes when doing this and often it is a good idea to explicitly specify the column types. This is achieved using the `col_types` argument. The `col_types = c` means that column stores character values. The `col_types = i` means that column stores integer values. The `col_types = d` means that column stores double values.


::: {.callout-note appearance="simple"}

## Example

If a file has 13 columns, 11 of which are double and 2 of which are integer, we can specify:
```{r}
#| class-output: outputcode
#| eval: true
df <- read_csv(
    './ressource/wine_quality.csv',
    col_types = 'idddddddddddi'
)
head(df)
```

:::

## Checking the data

It is good practice to check that the data have read in correctly to R. Use the `head()`, `tail()`, `summarise()`, `str()`, `dim()`, ... commands to quickly check for any anomalies.

::: {.callout-note appearance="simple"}

## Example

```{r}
#| class-output: outputcode
#| eval: true
str(df)
```

```{r}
#| class-output: outputcode
#| eval: true
summary(df)
```

:::

::: {.callout-note appearance="simple"}

Note that to read in Excel files, another package (`readxl`) have to downloaded and used. Similarly, with JSON files and the `jsonlite` package.

:::

## Additional resources

* The `tibble` [website](https://tibble.tidyverse.org).

* The `readr` [website](https://readr.tidyverse.org).

* `readr` [cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf).

<br><br>

::: {style="font-size: 0.875em;"}
[Back](/weeks/week-2.qmd) ‚èé
:::