---
title: "Other packages"
engine: knitr
---

```{r}
#| class-output: outputcode
#| eval: true
#| include: false
library(tidyverse)
```

<br>
The `tidyverse` packages we have explored constitute the core components of the `tidyverse`. There are a couple of additional packages within the core set: `stringr` for string manipulation, `forcats` for factors, and `lubridate` for date and time operations.

## The `stringr` package

The `stringr` package presents a comprehensive toolkit for string manipulation in R, streamlining a variety of text-related tasks. 

* To identidy specific patterns within strings, we use the function `str_detect()`. This function accepts regular expressions. It can be used to check if an email is well formatted for example. The `negate` argument is used to return `TRUE` if the patterns do not match.

::: {.callout-note appearance="simple"}

## Example

```{r}
#| class-output: outputcode
#| eval: true
email <- "name_surname@ul.ie"
str_detect(email, "^[a-z]*[.][a-z]*@ul.ie", negate = TRUE)
```

This returns `TRUE` because the email does not match the pattern (the `.` is replaced by a `_`).

:::

* To extract substrings with specific patterns within strings, we use the function `str_extract()`. This function also accepts regular expressions. It can be used to extract information from email for example.

::: {.callout-note appearance="simple"}

## Example

```{r}
#| class-output: outputcode
#| eval: true
email <- "name.surname@ul.ie"
str_extract(email, "([a-z]*).([a-z]*)@ul.ie", group = 1)
str_extract(email, "([a-z]*).([a-z]*)@ul.ie", group = 2)
```

:::

* To substitute particular substrings with others, we use the function `str_replace()`. An example of usage of this function is to convert from British english to American english and the other way round. This function accepts regular expressions as well.

::: {.callout-note appearance="simple"}

## Example

```{r}
#| class-output: outputcode
#| eval: true
str_replace("colorful", "or", "our")
```

:::


## The `forcats` package

The `forcats` package focuses on the effective management and manipulation of categorical variables in R. 

Let's reuse the wine quality data, here:

```{r}
#| class-output: outputcode
#| eval: true
df <- read_csv(
    './ressource/wine_quality.csv',
    col_types = 'idddddddddddi'
) |> 
    mutate(quality = as.factor(quality))
```

::: {.callout-note appearance="simple"}

## Example

By default, the `quality` factor levels are in increasing order.

```{r}
#| class-output: outputcode
#| eval: true
ggplot(df, aes(x=quality, y=alcohol)) +
  geom_boxplot() +
  theme_bw()
```

:::

* To reorder factor levels using another variable, we use the function `fct_reorder()`.

::: {.callout-note appearance="simple"}

## Example

We may want to order the factors using their median values.

```{r}
#| class-output: outputcode
#| eval: true
ggplot(
    data = df,
    aes(x=fct_reorder(quality, alcohol, .fun = median), y=alcohol)
) +
  geom_boxplot() +
  theme_bw()
```

:::

* To reorder factor levels according to their frequency, we use the function `fct_infreq()`.

::: {.callout-note appearance="simple"}

## Example

We may want to order the factors using their frequency. The most frequent appears first.

```{r}
#| class-output: outputcode
#| eval: true
ggplot(
    data = df,
    aes(x=fct_infreq(quality), y=alcohol)
) +
  geom_boxplot() +
  theme_bw()
```

:::

* To combine levels into broader categories, we use the function `fct_collapse()`.

::: {.callout-note appearance="simple"}

## Example

If we think that $6$ categories is to much for the quality of the wine, we can change the category to be `low`, `average` and `good`.

```{r}
#| class-output: outputcode
#| eval: true
ggplot(
    data = df,
    aes(
        x=fct_collapse(
            quality,
            low = c("3", "4"),
            average = c("5", "6"),
            good = c("7", "8")
        ),
        y=alcohol
    )
) +
  geom_boxplot() +
  theme_bw()
```

:::

## The `lubridate` package

The `lubridate` package offers a powerful suite of tools for handling date and time data in R. It simplifies tasks such as parsing, extracting, and manipulating temporal information.

Usually, the first operation to do is to convert character string into a Date object using the `ymd()` function.

::: {.callout-note appearance="simple"}

## Example

```{r}
#| class-output: outputcode
#| eval: true
today <- ymd("2023-09-21")
```

:::

We can then extract the day, month and year of the date using the function `day()`, `month()` and `year()` respectively.

::: {.callout-note appearance="simple"}

## Example

```{r}
#| class-output: outputcode
#| eval: true
day(today)
month(today)
year(today)
```

:::

Additionally, arithmetic operations are implemented to efficiently calculate dates.

::: {.callout-note appearance="simple"}

## Example

```{r}
#| class-output: outputcode
#| eval: true
next_course <- today + days(7)
next_course
```

:::


## Other (other) packages

Up to now, we have seen all the core `tidyverse` packages, but other packages are also installed with `tidyverse`. We may cite `hms` to manipulate times, `jsonlite` to work with JSON files or `readxl` to work with Excel files. The complete list of the packages is on the `tidyverse` [website](https://tidyverse.tidyverse.org).

## Additional resources

* The `stringr` [website](https://stringr.tidyverse.org), [cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf).

* The `forcats` [website](https://forcats.tidyverse.org), [cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/factors.pdf).

* The `lubridate` [website](https://lubridate.tidyverse.org), [cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/lubridate.pdf).

<br><br>

::: {style="font-size: 0.875em;"}
[Back](/weeks/week-2.qmd) ‚èé
:::