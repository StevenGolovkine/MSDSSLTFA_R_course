---
title: "Code Debugging in R"
engine: knitr
---

<br>
Code debugging involves identifying and correcting errors that occur during code execution, ensuring its security and reliability. It is a critical process in guaranteeing the integrity and dependability of the code.

## Steps to handle errors

So, what do you do when R code throws an unexpected error? The process can be split into four steps (adapted from Advanced R [book](https://adv-r.hadley.nz) by H. Wickham):

1. Google and Stackoverflow - Whenever we get an error message, we should start by googling it and searching stackoverflow. Most of the time, it is a common error with a known solution. When googling, we may improve the results by removing any variable names or values that are specific to our code.

2. Make it repeatable - To determine the underlying cause of an error, we will repeatedly execute the code while considering and discarding potential explanations. To simplify this step, creating a problem that is both easily and rapidly reproducible is worthwhile. Try to make the reproducible example as minimal as possible. During this process, some inputs may not trigger the error, which can be valuable for diagnosing the primary issue. In that case, implementing unit tests is interesting to automate the process.

3. Locate it - The tools in the next section may help you quickly identify the line of code causing the bug.

4. Fix and test it - After finding the bug, you must determine how to fix it and confirm that the fix works. Automated unit tests are highly beneficial in this regard. They not only verify the bug is resolved but also check for new bugs that may arise during the fix.


## Debugging tools

The easiest way to debug the code is to use the `print()` (or `cat()`) functions at several places in the code. The values of the variables will be display during the execution of the code. This method is usually not the more efficient.

Another option is to write the code in a file and to source it. Doing so, R will warn us if it can find some errors. This method usually concerns finding typos or syntax errors, such as a missing comma, but it will not be able to spot a calculation error.

We can add some interactivity in the debugging process by adding the `browser()` instruction in the code. Most of the time, `browser()` should be added in a function. When run, the code will then stop its execution at the line where this instruction was inserted. We will thus be able to examine the contents of all local, i.e. defined inside the function, variables defined before that line. It will appear in the **Console** pane.

::: {.callout-note appearance="simple"}

In RStudio, we also have the possibility to toggle breakpoints by left-clicking left to a line number in the code window (this will display a red dot). When a break point is set, executing the code will stop at the breakpoint (a green arrow is then displayed).

:::

To debug functions that are already packaged (like `lm()`), we can use the `debug()` function. To activate the debugging mode for the `lm()` function, we use `debug("lm")` before running the `lm` function. When the function is run, it enters in debugging mode (which is the same as what we have when running `browser()`). Once we are done, we should type `undebug("lm")` to switch off the debugging state `lm()`.

In the case the code throws an error but we forget to add the `debug()` or `browser()` function, we can use the `traceback()` function. This function shows the call stack at the time of the last unhandled error. 

::: {.callout-note appearance="simple"}

Normally R does not print warmings at the time they are issued, it collects them. Once excution is complete, it will print them all. Executing `options(warn = 1)` will causes R to print warnings as they occur, and executing `options(warn = 2)` converts warnings into errors, which usually abort execution.

:::


## Additional resources

* Posit debugging [webpage](https://support.posit.co/hc/en-us/articles/205612627-Debugging-with-the-RStudio-IDE).

* Advanced R book - [Chapter 22](https://adv-r.hadley.nz/debugging.html).

<br><br>

::: {style="font-size: 0.875em;"}
[Back](/weeks/week-9.qmd) ‚èé
:::