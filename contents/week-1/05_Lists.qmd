---
title: "Lists"
engine: knitr
---

<br>
A list is an object consisting of an ordered collection of objects (its components). Each component of a list can have a different type (or mode).

## Creating a list

A list is created using the `list()` function. We pass R objects as arguments to this function, separated by a `,`. If no arguments are passed, then the list is empty. Elements of a list can have names, which often makes them easier to access.

::: {.callout-note appearance="simple"}

## Example

```{r lists}
#| eval: false
#| class-output: outputcode
lst <- list(1, FALSE, "hello")  # List without name 
lst <- list(a = c(1, 2, 3), b = "hello", c = c(TRUE, FALSE))  # List with name
```

Lists can contain objects of different classes (vector, list, ...):
```{r list_mix}
#| eval: true
#| class-output: outputcode
lst <- list(
    vec = c(1, 2, 4),  # Vector
    lst = list(v = "Hello"),  # List
    mat = matrix(c(1, 0, 0, 1), nrow = 2)  # Matrix
)
```
:::

As for vectors, lists have two intrinsic properties: its `mode` and its `length`.

```{r list_length}
#| eval: true
#| class-output: outputcode
mode(lst)
length(lst)
```

In the case of named list, another property is added: its `names`.

```{r}
#| eval: true
#| class-output: outputcode
names(lst)
```

## Indexing lists

To subset/index lists, we can use:

- `[ ]` which returns a list element (this will be a list).

- `[[ ]]` or `$` which returns the contents of a list element (this will be an object of the same class as the element, e.g. vector, matrix, list, ...).

The rules for indexing lists based on position are the same as those for vectors. Lists can also be indexed using component names, which is not applicable to vectors. Typically, we employ `[ ]` when extracting multiple elements from a list and use `[[ ]]` (with a position) or `$` (with a name) when we require a single element from the list.

::: {.callout-note appearance="simple"}

## Example

To access the first two elements of `lst` using `[ ]`, we can use a numbers indexing the positions of the elements in the list:

```{r}
#| eval: true
#| class-output: outputcode
lst[c(1, 2)]
```

The same result can be achieved using the name of the elements:

```{r}
#| eval: true
#| class-output: outputcode
lst[c('vec', 'lst')]
```

To access the first element of `lst` using `[[ ]]`, we can use number indexing the position of the element in the list:

```{r}
#| eval: true
#| class-output: outputcode
lst[[1]]
```

To access the first element of `lst` using `$`:

```{r}
#| eval: true
#| class-output: outputcode
lst$vec
```
:::

## Appending to lists

Appending new elements to a list can be directly done by assigning a new value to a specific index. As previsouly, to access the index, you can use `[[ ]]` or `$` (even if the entry does not exist). We usually use position indexing, with `[[ ]]`, to append to the list sequentially (e.g. in a loop), while we use name indexing to save results. 

::: {.callout-note appearance="simple"}

## Example

Using position indexing:
```{r list_append_pos}
#| eval: true
#| class-output: outputcode
lst[[4]] <- c(TRUE, FALSE, NA)
```

Using name indexing:
```{r list_append_name}
#| eval: true
#| class-output: outputcode
lst$new <- "This is new!"
```

:::

## Additional resources

- R manual by the R Core Team, [Section 6 on lists](https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Lists-and-data-frames).


<br><br>

::: {style="font-size: 0.875em;"}
[Back](/weeks/week-1.qmd) ‚èé
:::