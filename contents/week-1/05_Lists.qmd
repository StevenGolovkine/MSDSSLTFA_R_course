---
title: "Lists"
engine: knitr
---

## Creating a list

A list is created using the `list()` function. We pass R objects as arguments to this function, separated by a `,`. If no arguments are passed, then the list is empty. Elements of a list can have names, which often makes them easier to access.

Examples of lists:
```{r lists}
#| eval: false
#| class-output: outputcode
l <- list(1, FALSE, "hello")  # List without name 
l <- list(a = c(1, 2, 3), b = "hello", c = c(TRUE, FALSE))  # List with name
```

Lists can contain objects of different classes (vector, list, ...):
```{r list_mix}
#| eval: true
#| class-output: outputcode
l_mix <- list(
    vec = c(1, 2, 4),  # Vector
    l = list(v = "Hello"),  # List
    mat = matrix(c(1, 0, 0, 1), nrow = 2)  # Matrix
)
```


## List attributes

Lists are like vectors and have one dimension, their length. To determine how many elements are in a list, use:

```{r list_length}
#| eval: true
#| class-output: outputcode
length(l_mix)
```

Each element of the list will have its own attributes (e.g. dimension of a matrix):

```{r list_sub_length}
#| eval: true
#| class-output: outputcode
dim(l_mix$mat)
```

List elements also have names (if you choose to use them):

```{r}
#| eval: true
#| class-output: outputcode
names(l_mix)
```

Each element of the list may also have row and/or column names:

```{r}
#| eval: true
#| class-output: outputcode
names(l_mix$l)
```


## Subsetting lists

To subset/index lists we can use:

- `[ ]` which returns a list element (this will be a list).

- `[[ ]]` or `$` which returns the contents of a list element (this will be an object of the same class as the element, e.g. vector, matrix, list)

- To access the first element of `l_mix` using `[ ]`, we can use a number(s) indexing the position(s) of the element(s) in the list:

```{r}
#| eval: true
#| class-output: outputcode
l_mix[1]
class(l_mix[1])
```

- Or the name(s) of the element(s):

```{r}
#| eval: true
#| class-output: outputcode
l_mix[c('vec', 'l')]
class(l_mix[c('vec', 'l')])
```

- To access the first element of `l_mix` using `[[ ]]`, we can use a number(s) indexing the position(s) of the element(s) in the list:

```{r}
#| eval: true
#| class-output: outputcode
l_mix[[1]]
class(l_mix[[1]])
```

- Or the name(s) of the element(s):

```{r}
#| eval: true
#| class-output: outputcode
l_mix[['vec']]
class(l_mix[['vec']])
```

- Using `[[ ]]` is equivalent to using the `$` symbol:

```{r}
#| eval: true
#| class-output: outputcode
l_mix$vec
class(l_mix$vec)
```

## Appending lists

We can append lists using position:
```{r list_append_pos}
#| eval: true
#| class-output: outputcode
l_mix[[4]] <- c(TRUE, FALSE, NA)
```

We can also append lists using name:
```{r list_append_name}
#| eval: true
#| class-output: outputcode
l_mix$new <- "This is new!"
```

The list `l_mix` has now `r length(l_mix)` entries.

## Additional resources
