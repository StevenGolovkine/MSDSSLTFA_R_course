---
title: "R Basics"
engine: knitr
---

## How does R work?

By running coding **expressions** in the R console. A prompt, the `>` sign, is displayed when R is waiting for an expression.

**Expressions** in R denote code lines accomplishing specific tasks. These lines can be divided by a semicolon (`;`) or a new line. They can also be grouped using curly braces (`{` and `}`). Frequently, these expressions are stored together within **functions**.

::: {#fig-creators}

![](./images/expression.png)

An expression.

:::


If an expression is incomplete at the end of a line, a `+` is displayed on subsequent lines until it is syntactically complete.

::: {#fig-creators}

![](./images/incomplete_expression.png)

An incomplete expression.

:::

### Comments

In R, comments are designed with `#`. Multi-lines comments do not exists, you have to put another `#` at the beginning of each line.

```{r comments}
# This is a comment.
# And, here another one!
```

### Evaluation

When a complete expression is entered into the R console, it is **evaluated**. The result of the evaluated expression is then **returned**. Depending on the expression, the result might be printed or not. For example, the following expression is evaluated but nothing is printed.

```{r noprint}
x <- 1  # Nothing is printed...
```

To print the result, we use the `print` function or simply type the name of the object.

### R as a calculator

R is basically a calculator! Most of the usual mathematical functions are already implemented (`+`, `-`, `*`, `sqrt`, `exp`, etc.). You can type `?S4groupGeneric` to see all the default implemented mathematical functions.

### Order of operations

As for mathematics, the order in which you list operations is important. R uses the BODMAS rule to decide on the ordering of the calculations:

1.  **B**rackets
2.  **O**rders (powers and roots)
3.  **D**ivision
4.  **M**ultiplication
5.  **A**ddition
6.  **S**ubtraction

It is often very useful to use brackets to make the ordering explicit. For example the following:

```{r}
#| class-output: outputcode
#| eval: true
10 + 4 / 2
```

will perform the `4 / 2` part first and then add the result to `10`. While if we use brackets:

```{r}
#| class-output: outputcode
#| eval: true
(10 + 4) / 2
```

the `10 + 4` part is calculated first and the result is then divided by `2`.

### Assignment operators

In R, the basic **assignment** operator is `<-`. For example, to store the value $1$ into the variable `x`, type:

```{r assignment}
#| eval: false
x <- 1
```

You could also use `=` as assignment operator, but this is generally reserved for use in function arguments. Rarely, you will come across the assignment operator `<<-`. This operator is used to define variables in *a different environment* than the one you are working in.

## Getting help in R

Type the name of the function into the search bar in the Help pan and press Enter. The Help file can be opened from the R console using the command `?function` or `help(function)`.

Google is your friend! And so is [stackoverflow](https://stackoverflow.com/collectives/r-language)...

\[Picture of the help file of sqrt\]


## R coding style

Maintaining readable, clear, and maintainable code is essential in good programming practice. The first step towards achieving this is adhering to a consistent and organized coding style. For most cases, I highly recommend adopting the [tidyverse style guide](https://style.tidyverse.org/index.html). Following this style guide can greatly enhance code readability and facilitate collaboration in your R projects.


## Additional resources

- [R manual](https://cran.r-project.org/doc/manuals/R-lang.html) by the R Core Team.

- [R reference](https://cran.r-project.org/doc/contrib/Short-refcard.pdf) card by Tom Short.

- [Style guide](https://style.tidyverse.org/index.html) from the tidyverse.

- Assignment operator [`<<-`](https://cran.r-project.org/doc/manuals/R-intro.html#Scope).


<br><br>

::: {style="font-size: 0.875em;"}
Back to [week 01](/weeks/week-1.qmd) ‚èé
:::