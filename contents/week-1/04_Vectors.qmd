---
title: "Vectors"
engine: knitr
---

<br>
A vector is a single entity consisting of an ordered collection of elements.

## Creating a vector

A vector is created using the `c()` function. To create a numeric vector with the values $10.4, 5.6, 3.1, 6.4,$ and $21.7$, we can use:

```{r vec_create}
#| eval: true
#| class-output: outputcode
vec <- c(10.4, 5.6, 3.1, 6.4, 21.7)  # Numeric vector with 5 elements
vec  # Print the contents
```

As we have seen before, a vector has two intrinsic properties: its `mode` and its `length`.
```{r vec_type}
#| eval: true
#| class-output: outputcode
mode(vec)
length(vec)
```


## Combining vectors

Vectors can be combined using the `c()` command.

::: {.callout-note appearance="simple"}

## Example

To combine two copies of the `vec` vector with a zero in the middle place, you would use:

```{r vec_combine}
#| eval: true
#| class-output: outputcode
c(vec, 0, vec)
```

:::

Be careful, if you try to combine vectors with different type, the type of the resulting vector will be the most general one.

::: {.callout-note appearance="simple"}

## Example

When combine numbers and characters, the numbers are converted to characters:

```{r vec_combine_type}
#| eval: true
#| class-output: outputcode
c(vec, "Mary")
```

:::

## Indexing vectors

Accessing to specific element(s) of a vector is possible using the `[]` operator. Note that, in R, the indexing of a vector starts at $1$ (unlike most programming language that start at $0$).

::: {.callout-note appearance="simple"}

## Example

`vec[2]` will return the second element of the vector `vec`:

```{r vec_index}
#| eval: true
#| class-output: outputcode
vec[2]
```

:::

Specifying negative values in the indices will drop that element(s).

::: {.callout-note appearance="simple"}

## Example

```{r vec_index_neg}
#| eval: true
#| class-output: outputcode
vec[-2]
```

:::

Multiple elements can be accessed by supplying a vector of indices.

::: {.callout-note appearance="simple"}

## Example

To access the first and third elements of `vec`:

```{r vec_index_multi}
#| eval: true
#| class-output: outputcode
vec[c(1, 3)]
```

:::

To access consecutive indices, you can use `:`.

::: {.callout-note appearance="simple"}

## Example

To access the first, second and third elements of `vec`:

```{r vec_index_multi_consecutive}
#| eval: true
#| class-output: outputcode
vec[1:3]
```

:::

Logical operators can be used for subsetting vectors.

::: {.callout-note appearance="simple"}

## Example

If we want to work with just the components of `vec` that are larger than 6:

```{r vec_index_logic}
#| eval: true
#| class-output: outputcode
mask <- vec > 6
vec[mask]
```

It could be done in one line using `vec[vec > 6]`. R returns the values in `vec` where a `TRUE` is recorded for `vec > 6`.

:::

## Operations

Usual mathematical operators can be carried on vectors:

-   Addition: `+`
-   Subtraction: `-`
-   Multiplication: `*`
-   Division: `/`
-   Euclidean division: `%%` and `%/%`
-   Exponentiation: `^`

Computations are (typically) performed **element-wise**.

::: {.callout-note appearance="simple"}

## Example

To calculate the square of `vec`, `vec^2`, we use:

```{r expo}
#| eval: true
#| class-output: outputcode
vec^2
```
i.e. R takes each elements of `vec` and calculates `value^2`.
:::

If you are unsure if the calculations are element-wise, you should check on some elements. Other examples of common operations are `log()`, `exp()`, `sin()`, `cos()`, etc.

::: {.callout-note appearance="simple"}

## Example

```{r vec_op}
#| eval: true
#| class-output: outputcode
log(vec)
exp(vec)
sin(vec)
```

:::

### Vectors of the same length

We can add, subtract, multiply or divide vectors of the same length easily. In this case, R takes the values in the same locations (e.g. the first element of each vector) and performs the computations.

::: {.callout-note appearance="simple"}

## Example

To add two vectors of the same length:

```{r two_vec_op}
#| eval: true
#| class-output: outputcode
vec_1 <- c(1, 3, 5, 7, 9)
vec_2 <- c(0, 2, 4, 6, 8)

vec_1 + vec_2
```

:::

### Vector of different lengths

When you perform an operation on vectors of unequal lengths, R automatically **recycles** the shorter vector to match the length of the longer one. This recycling process is applied to ensure that the operation can be carried out element-wise across the vectors. If the shorter vector's length is not an exact divisor of the longer vector's length, the replication is done in a circular manner until both vectors have the same length and a warning message is issued. This indicates that the recycling might not be complete and that the operation may not behave as expected.

::: {.callout-note appearance="simple"}

## Example

Let's look at an example to understand the concept.

```{r recycled_vec}
#| eval: true
#| class-output: outputcode
vec_1 <- c(1, 3, 5, 7, 9)
vec_2 <- c(0, 2)

vec_1 * vec_2
```

Let's dive into the different elements of the resulting vector.

-   The first element is `1 * 0 = 0`.
-   The second element is `3 * 2 = 6`.
-   The third element is `5 * 0 = 0`.
-   The fourth element is `7 * 2 = 14`.
-   The fifth element is `9 * 0 = 0`.

The version of `vec_2` that was actually multiplied to `vec_1` is therefore:

```{r}
#| eval: false
c(0, 2, 0, 2, 0)
```

:::

Recycling is particularly useful when you want to perform operations on vectors of different lengths without explicitly extending the shorter vector. However, it is important to be cautious when relying on recycling, as it can lead to unexpected results if not used carefully. Always ensure that the recycling behavior aligns with your intended operation.


## Additional resources

- R manual by the R Core Team, [Section 2 on vectors](https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Simple-manipulations-numbers-and-vectors).

<br><br>

::: {style="font-size: 0.875em;"}
[Back](/weeks/week-1.qmd) ‚èé
:::