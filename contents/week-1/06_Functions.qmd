---
title: "Functions"
engine: knitr
---

<br>
R is a **functional** programming language, with some OOP systems implemented.
Big tasks are broken down into smaller pieces, and functions are written to
perform each of the smaller tasks. Functions are another mode of R object (`function`). We have already see many of the built-in functions in R, e.g.
`c()`, `list()` or `sqrt()`. Writing functions is a core activity of an R
programmer and is used for reproducibility.

## The role of functions

Functions are often created if a code chunk needs to be evaluated numerous times
with different inputs. A function acts as an interface to a set of code via a
set of parameters that the user specifies. This provides an abstraction of the
in-depth workings of the code and allows other users to use the code without
writing all of it themselves. A function must be written and **loaded** into the
environment before it can be used (as for usual variables). Functions can also
be passed as inputs to other functions.

## Advantages of using functions

There are three (main) advantages to using functions over copying and pasting code:

1.  A function has a name which makes the code easier to understand.
2.  If you change requirements, code only needs to be updated in one location
    (the function) versus lots of copied chunks of code.
3.  Reduces the chance of making copy and paste or update errors.

## Structure of functions

Functions have some key properties:

1.  **Name** -- every function has a name which is used to **call** the function.
2.  **Body** -- the code to be executed when the function is called.
3.  **Arguments** -- a list of input objects that the user needs to specify.
4.  **Outputs** -- a list of output objects that are returned once the function
    is run (called).

Functions are constructed in R as follows:

```{r}
#| eval: false
#| class-output: outputcode
function_name <- function(argument_1, argument_2, ...) {
    
    Body/code
    
    Output
    
}
```

You decide on the name of the function. The `function()` command is used to
create a new function. Inside the `( )`, the inputs (arguments) are specified,
with names as appropriate. The body of the function occurs between the `{ }`.
The outputs are typically specified at the end of the body of code. Use comments
to describe what the function does, the inputs expected, and the outputs at the
start of the function and throughout the code. The package
[`roxygen2`](https://roxygen2.r-lib.org) provides functions to nicely format
your documentation.

Once the function is loaded in the environment, it can be invoked in several ways
```{r}
#| eval: false
#| class-output: outputcode
function_name(1, 'A')
function_name(argument_1 = 1, argument_2 = 'A')
function_name(1, argument_2 = 'A')
```

Arguments can have suitable default values assigned, making it possible to exclude them from the function call if the defaults are applicable.

```{r}
#| eval: false
#| class-output: outputcode
function_name <- function(argument_1, arg_with_default=1, ...) {
    
    Body/code
    
    Output
    
}
```

So, the call `function_name(1)` is equivalent to `function_name(1, 1)`.

::: {.callout-note appearance="simple"}

## Example

To create a simple function, that takes no arguments and does nothing use:

```{r}
#| eval: true
#| class-output: outputcode
first_func <- function() {
    # Empty body
    
    # No outputs
}
```

To call or execute this function:

```{r}
#| eval: true
#| class-output: outputcode
first_func()
```

Now, let's modify our function to print something when called:

```{r}
#| eval: true
#| class-output: outputcode
first_func <- function() {
    print("Hello, world!")
}

first_func()
```
:::

## The `return()` statement

In R, the `return()` statement exists and is used to return a result from a function. By default, R will return the last expression evaluated within the function. So, if your function consists of a sequence of expressions, you don't need to explicitly use `return()`.

In some case, however, you will need to explicitly return something:

1. **Early stopping**: If you have conditions where you want to exit the function early.

::: {.callout-note appearance="simple"}

## Example

```{r}
early_exit <- function(x) {
    if (x < 0) {
        return("Negative input not allowed!")
    }
    # rest of the function
}
```

:::

2. **Multiple returns**: If your function has multiple return points based on different conditions. 

::: {.callout-note appearance="simple"}

## Example

```{r}
multiple_returns <- function(x) {
    if (x < 0) {
        return("Negative input not allowed!")
    } else if (x == 0) {
        return("Input is zero!")
    }
    # rest of the function
}
```

:::

3. **Inside loops**: In iterative structure, you can exit the loop if a certain condition is met.

::: {.callout-note appearance="simple"}

## Example

```{r}
inside_loops <- function(numbers) {
    for (num in numbers) {
        if (num < 0) {
            return("Negative number found")
        }
    }
    # rest of the function
}
```

:::

## Additional resource

- R manual by the R Core Team, [Section 10 on functions](https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Writing-your-own-functions).

<br><br>

::: {style="font-size: 0.875em;"}
Back to [week 01](/weeks/week-1.qmd) ‚èé
:::