---
title: "Pseudo-random number"
engine: knitr
---

<br>
Pseudo-random numbers are not random in the way you might expect!


::: {.callout-note appearance="simple"}

## D. H. Lehmer [@lehmer1951]

A random sequence is a vague notion in which each term is unpredictable to the uninitiated, and whose digits pass a certain number of tests traditional with statisticians...

:::

A pseudo-random sequence have the appearance of random numbers, but are in fact completely deterministic. Pseudo-random number generator are algorithms that use mathematical formulae to produce sequences of numbers that appear random.

R uses a pseudo-random generator named the Mersenne-Twister generator. Its cycle length is $2^{19937} - 1$.


Let's see what happen when we generate some realisations from a uniform distributions.

```{r}
#| class-output: outputcode
#| eval: true
set.seed(42)
runif(4)
runif(4)
```

```{r}
#| class-output: outputcode
#| eval: true
set.seed(42)
runif(4)
```

::: {.callout-important icon=false}
## Replication

To perform an exact replication of your program, you have to specify the seed using the `set.seed()` function!
:::


## The inverse-transform method

It is possible to generate realisations of whatever distribution using only realisations from a uniform distribution.

Let $P$ be a probability distribution defined on $\mathbb{R}$ or $\mathbb{R}^d$. We aim to generate an _independent_ and _identically distributed_ (iid) sample $X_1, \dots, X_n$ with the same distribution $P$. All random variables can be generated from the uniform distribution $\mathcal{U}(0, 1)$. So, it suffices to generate an iid sample $U_1, \dots, U_n$ from $\mathcal{U}(0, 1)$.

Assume we know the cumulative distribution function $F$ of $P$. We note $F^{-1}$ the inverse function of $F$ when $F: \mathbb{R} \rightarrow [0, 1]$ is one-to-one, defined as
$$F^{-1}(u) = \inf \{x \in \mathbb{R}, F(x) \geq u\}.$$

Then, if $U \sim \mathcal{U}(0, 1)$, $F^{-1}(U)$ has the same distribution as $X$. The converse is also true, if the cumulative distribution function $F$ is continue, then $F(X) \sim \mathcal{U}(0, 1)$.

::: {.callout-note icon=false}
## Algorithm: the inverse-transform method

Input:

* $n$: length of the sample
* $F$: cumulative distribution function of the output sample

Algorithm:

<div class="pseudocode">

**for** $i$ **from** $1$ **to** $n$ **do**

* generate $u_i \sim \mathcal{U}(0, 1)$
* compute $x_i = F^{-1}(u_i)$

**endfor**
</div>

Output:

* Sample $(x_1, \dots, x_n)$ with cumulative distribution function $F$.
:::

::: {.callout-note appearance="simple"}

## Example: Simulation of a sample from $\mathcal{E}(\theta)$.

We aim to generate a sample $x_1, \dots, x_n$ i.i.d. from $\mathcal{E}(\theta)$. The cumulative distribution function of $\mathcal{E}(\theta)$ is given by
$$F(x, \theta) = 1 - \exp(-\theta x), \quad x \geq 0.$$
Solving the equation $F(x, \theta) = u$, we find the inverse of the cumulative distribution function
$$F^{-1}(u, \theta) = -\frac{1}{\theta}\log(1 - u).$$

```{r}
#| class-output: outputcode
#| eval: true
set.seed(42)               # seed setting
theta <- 4; n <- 10000     # parameters setting
u <- runif(n)              # uniform sample
x <- -log(1 - u) / theta   # inverse transform method

ks.test(x, "pexp", theta)  # Kolmogorov Smirnov test
```

:::

::: {.callout-note appearance="simple"}

## Example: Simulation of a sample from $\mathcal{B}(\theta)$.

We aim to generate a sample $x_1, \dots, x_n$ i.i.d from $\mathcal{B}(\theta)$ (where $\theta \in [0,1]$). The cumulative distribution function of $\mathcal{B}(\theta)$ is given by
$$F(x) = \left\{
\begin{array}{r c l}
    1 &\text{if}& x \geq 1,\\
    1 - \theta &\text{if}& x \in [0,1[,\\
    0 &if& x < 0.
\end{array}
\right.
$$ 
Solving the equation $F(x, \theta) = u$, we find the inverse of the cumulative distribution function
$$F^{-1}(u) = \left\{
\begin{array}{r c l}
    1 &\text{if}& u \in [1-\theta,1], \\
    0 &\text{if}& u \in [0,1-\theta[.
\end{array}
\right.
$$

```{r}
#| class-output: outputcode
#| eval: true
set.seed(10)              # seed setting
theta <- 0.4; n <- 10000  # parameters setting
u <- runif(n)             # uniform sampling
x <- (u > (1 - theta))    # inverse transform method

chisq.test(table(x), p = c(1 - theta, theta))  # chisq test
```

:::

## Additional resources

## References

::: {#refs}
:::